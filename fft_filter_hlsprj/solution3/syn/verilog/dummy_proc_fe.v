// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_fe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        config_fwd_data_V_din,
        config_fwd_data_V_full_n,
        config_fwd_data_V_write,
        config_inv_data_V_din,
        config_inv_data_V_full_n,
        config_inv_data_V_write,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        input_xn2_address0,
        input_xn2_ce0,
        input_xn2_q0,
        output_xn1_din,
        output_xn1_full_n,
        output_xn1_write,
        output_xn2_din,
        output_xn2_full_n,
        output_xn2_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] config_fwd_data_V_din;
input   config_fwd_data_V_full_n;
output   config_fwd_data_V_write;
output  [15:0] config_inv_data_V_din;
input   config_inv_data_V_full_n;
output   config_inv_data_V_write;
input  [63:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [10:0] input_xn2_address0;
output   input_xn2_ce0;
input  [63:0] input_xn2_q0;
output  [63:0] output_xn1_din;
input   output_xn1_full_n;
output   output_xn1_write;
output  [63:0] output_xn2_din;
input   output_xn2_full_n;
output   output_xn2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg config_fwd_data_V_write;
reg config_inv_data_V_write;
reg in_r_read;
reg input_xn2_ce0;
reg[63:0] output_xn1_din;
reg output_xn1_write;
reg output_xn2_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] detector_tail_M_rea_address0;
reg    detector_tail_M_rea_ce0;
reg    detector_tail_M_rea_we0;
wire   [31:0] detector_tail_M_rea_q0;
reg   [8:0] detector_tail_M_ima_address0;
reg    detector_tail_M_ima_ce0;
reg    detector_tail_M_ima_we0;
wire   [31:0] detector_tail_M_ima_q0;
reg    config_fwd_data_V_blk_n;
reg    config_inv_data_V_blk_n;
reg    in_r_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_fu_256_p2;
reg    output_xn1_blk_n;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_reg_324;
reg    output_xn2_blk_n;
wire   [11:0] i_1_fu_235_p2;
reg   [11:0] i_1_reg_303;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_241_p1;
reg   [63:0] tmp_reg_308;
wire   [0:0] exitcond_fu_229_p2;
reg   [63:0] input_xn2_load_reg_319;
wire    ap_CS_fsm_state3;
reg    ap_block_state4;
wire   [31:0] tmp_2_fu_262_p1;
reg   [31:0] tmp_2_reg_328;
reg   [31:0] in_M_imag_V_load_ne_reg_333;
wire   [0:0] tmp_8_fu_276_p2;
reg   [0:0] tmp_8_reg_338;
wire   [11:0] tmp_9_fu_282_p2;
reg   [11:0] tmp_9_reg_342;
reg   [31:0] detector_tail_M_rea_1_reg_357;
wire    ap_CS_fsm_state6;
reg   [31:0] detector_tail_M_ima_1_reg_362;
reg   [11:0] i_reg_217;
reg    ap_block_state1;
reg    ap_block_state7;
wire   [63:0] tmp_4_fu_288_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] output_xn1_M_imag_V_fu_293_p3;
wire   [2:0] tmp_1_fu_246_p4;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

dummy_proc_fe_detbkb #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
detector_tail_M_rea_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(detector_tail_M_rea_address0),
    .ce0(detector_tail_M_rea_ce0),
    .we0(detector_tail_M_rea_we0),
    .d0(tmp_2_reg_328),
    .q0(detector_tail_M_rea_q0)
);

dummy_proc_fe_detbkb #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
detector_tail_M_ima_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(detector_tail_M_ima_address0),
    .ce0(detector_tail_M_ima_ce0),
    .we0(detector_tail_M_ima_we0),
    .d0(in_M_imag_V_load_ne_reg_333),
    .q0(detector_tail_M_ima_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_reg_324 == 1'd1) & (output_xn1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        i_reg_217 <= i_1_reg_303;
    end else if ((~((config_inv_data_V_full_n == 1'b0) | (config_fwd_data_V_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_217 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        detector_tail_M_ima_1_reg_362 <= detector_tail_M_ima_q0;
        detector_tail_M_rea_1_reg_357 <= detector_tail_M_rea_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_303 <= i_1_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_reg_324 <= icmp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_M_imag_V_load_ne_reg_333 <= {{in_r_dout[63:32]}};
        tmp_2_reg_328 <= tmp_2_fu_262_p1;
        tmp_8_reg_338 <= tmp_8_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_xn2_load_reg_319 <= input_xn2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (tmp_8_fu_276_p2 == 1'd1) & (icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_9_reg_342 <= tmp_9_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_308[11 : 0] <= tmp_fu_241_p1[11 : 0];
    end
end

always @ (*) begin
    if (((exitcond_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_fwd_data_V_blk_n = config_fwd_data_V_full_n;
    end else begin
        config_fwd_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((config_inv_data_V_full_n == 1'b0) | (config_fwd_data_V_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_fwd_data_V_write = 1'b1;
    end else begin
        config_fwd_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_inv_data_V_blk_n = config_inv_data_V_full_n;
    end else begin
        config_inv_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((config_inv_data_V_full_n == 1'b0) | (config_fwd_data_V_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_inv_data_V_write = 1'b1;
    end else begin
        config_inv_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        detector_tail_M_ima_address0 = tmp_4_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        detector_tail_M_ima_address0 = tmp_reg_308;
    end else begin
        detector_tail_M_ima_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4)))) begin
        detector_tail_M_ima_ce0 = 1'b1;
    end else begin
        detector_tail_M_ima_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_reg_338 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        detector_tail_M_ima_we0 = 1'b1;
    end else begin
        detector_tail_M_ima_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        detector_tail_M_rea_address0 = tmp_4_fu_288_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        detector_tail_M_rea_address0 = tmp_reg_308;
    end else begin
        detector_tail_M_rea_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4)))) begin
        detector_tail_M_rea_ce0 = 1'b1;
    end else begin
        detector_tail_M_rea_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_reg_338 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        detector_tail_M_rea_we0 = 1'b1;
    end else begin
        detector_tail_M_rea_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_r_blk_n = in_r_empty_n;
    end else begin
        in_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_r_read = 1'b1;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_xn2_ce0 = 1'b1;
    end else begin
        input_xn2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_reg_324 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        output_xn1_blk_n = output_xn1_full_n;
    end else begin
        output_xn1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_reg_324 == 1'd1) & (output_xn1_full_n == 1'b0)) & (icmp_reg_324 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        output_xn1_din = output_xn1_M_imag_V_fu_293_p3;
    end else if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        output_xn1_din = in_r_dout;
    end else begin
        output_xn1_din = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_reg_324 == 1'd1) & (output_xn1_full_n == 1'b0)) & (icmp_reg_324 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | (~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        output_xn1_write = 1'b1;
    end else begin
        output_xn1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_xn2_blk_n = output_xn2_full_n;
    end else begin
        output_xn2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
        output_xn2_write = 1'b1;
    end else begin
        output_xn2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((config_inv_data_V_full_n == 1'b0) | (config_fwd_data_V_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (icmp_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0))) & (icmp_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((~((icmp_reg_324 == 1'd1) & (output_xn1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((config_inv_data_V_full_n == 1'b0) | (config_fwd_data_V_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((output_xn2_full_n == 1'b0) | ((icmp_fu_256_p2 == 1'd0) & (output_xn1_full_n == 1'b0)) | ((icmp_fu_256_p2 == 1'd0) & (in_r_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state7 = ((icmp_reg_324 == 1'd1) & (output_xn1_full_n == 1'b0));
end

assign config_fwd_data_V_din = 16'd3135;

assign config_inv_data_V_din = 16'd2;

assign exitcond_fu_229_p2 = ((i_reg_217 == 12'd2048) ? 1'b1 : 1'b0);

assign i_1_fu_235_p2 = (i_reg_217 + 12'd1);

assign icmp_fu_256_p2 = ((tmp_1_fu_246_p4 == 3'd0) ? 1'b1 : 1'b0);

assign input_xn2_address0 = tmp_fu_241_p1;

assign output_xn1_M_imag_V_fu_293_p3 = {{detector_tail_M_ima_1_reg_362}, {detector_tail_M_rea_1_reg_357}};

assign output_xn2_din = input_xn2_load_reg_319;

assign tmp_1_fu_246_p4 = {{i_reg_217[11:9]}};

assign tmp_2_fu_262_p1 = in_r_dout[31:0];

assign tmp_4_fu_288_p1 = tmp_9_reg_342;

assign tmp_8_fu_276_p2 = ((i_reg_217 > 12'd1535) ? 1'b1 : 1'b0);

assign tmp_9_fu_282_p2 = ($signed(i_reg_217) + $signed(12'd2560));

assign tmp_fu_241_p1 = i_reg_217;

always @ (posedge ap_clk) begin
    tmp_reg_308[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //dummy_proc_fe
