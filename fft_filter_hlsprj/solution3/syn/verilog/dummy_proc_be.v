// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_be (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        coefs_address0,
        coefs_ce0,
        coefs_q0,
        input_xk1_dout,
        input_xk1_empty_n,
        input_xk1_read,
        input_xk2_dout,
        input_xk2_empty_n,
        input_xk2_read,
        output_xk1_address0,
        output_xk1_ce0,
        output_xk1_we0,
        output_xk1_d0,
        out_r_din,
        out_r_full_n,
        out_r_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [10:0] coefs_address0;
output   coefs_ce0;
input  [63:0] coefs_q0;
input  [63:0] input_xk1_dout;
input   input_xk1_empty_n;
output   input_xk1_read;
input  [63:0] input_xk2_dout;
input   input_xk2_empty_n;
output   input_xk2_read;
output  [10:0] output_xk1_address0;
output   output_xk1_ce0;
output   output_xk1_we0;
output  [63:0] output_xk1_d0;
output  [63:0] out_r_din;
input   out_r_full_n;
output   out_r_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg coefs_ce0;
reg input_xk1_read;
reg input_xk2_read;
reg output_xk1_ce0;
reg output_xk1_we0;
reg out_r_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_xk1_blk_n;
wire    ap_CS_fsm_state3;
reg    input_xk2_blk_n;
reg    out_r_blk_n;
wire    ap_CS_fsm_state10;
reg   [0:0] icmp_reg_300;
wire   [11:0] i_2_fu_156_p2;
reg   [11:0] i_2_reg_285;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_162_p1;
reg   [63:0] tmp_reg_290;
wire   [0:0] exitcond_fu_150_p2;
wire   [0:0] icmp_fu_177_p2;
wire   [31:0] tmp_5_fu_183_p1;
reg   [31:0] tmp_5_reg_304;
reg    ap_block_state3;
reg   [31:0] p_y_M_imag_V_read_a_reg_309;
wire   [31:0] p_r_M_real_V_fu_197_p1;
reg   [31:0] p_r_M_real_V_reg_314;
reg   [31:0] p_r_M_imag_V_reg_319;
reg   [63:0] input_xk2_read_reg_324;
wire  signed [62:0] tmp_1_fu_211_p1;
wire    ap_CS_fsm_state4;
wire  signed [62:0] tmp_2_fu_214_p1;
wire  signed [62:0] tmp_3_fu_217_p1;
wire  signed [62:0] tmp_4_fu_220_p1;
wire   [62:0] grp_fu_223_p2;
reg   [62:0] tmp1_i_i_cast_reg_353;
wire    ap_CS_fsm_state8;
wire   [62:0] grp_fu_229_p2;
reg   [62:0] tmp_1_i_i_cast_reg_358;
wire   [62:0] grp_fu_235_p2;
reg   [62:0] tmp_2_i_i_cast_reg_363;
wire   [62:0] grp_fu_241_p2;
reg   [62:0] tmp_3_i_i_cast_reg_368;
reg   [31:0] complex_M_real_V_wr_reg_373;
wire    ap_CS_fsm_state9;
reg   [31:0] complex_M_imag_V_wr_reg_378;
reg   [11:0] i_reg_139;
reg    ap_block_state1;
reg    ap_block_state10;
wire   [2:0] tmp_7_fu_167_p4;
wire  signed [31:0] grp_fu_223_p0;
wire  signed [31:0] grp_fu_223_p1;
wire  signed [31:0] grp_fu_229_p0;
wire  signed [31:0] grp_fu_229_p1;
wire  signed [31:0] grp_fu_235_p0;
wire  signed [31:0] grp_fu_235_p1;
wire  signed [31:0] grp_fu_241_p0;
wire  signed [31:0] grp_fu_241_p1;
wire   [62:0] p_Val2_s_fu_247_p2;
wire   [62:0] p_Val2_1_fu_261_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

filter_top_mul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32dEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

filter_top_mul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32dEe_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_229_p0),
    .din1(grp_fu_229_p1),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

filter_top_mul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32dEe_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_235_p0),
    .din1(grp_fu_235_p1),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

filter_top_mul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32dEe_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_241_p0),
    .din1(grp_fu_241_p1),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_reg_300 == 1'd0) & (out_r_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        i_reg_139 <= i_2_reg_285;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_139 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        complex_M_imag_V_wr_reg_378 <= {{p_Val2_1_fu_261_p2[62:31]}};
        complex_M_real_V_wr_reg_373 <= {{p_Val2_s_fu_247_p2[62:31]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_285 <= i_2_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_reg_300 <= icmp_fu_177_p2;
        tmp_reg_290[11 : 0] <= tmp_fu_162_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_xk2_empty_n == 1'b0) | (input_xk1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_xk2_read_reg_324 <= input_xk2_dout;
        p_r_M_imag_V_reg_319 <= {{input_xk1_dout[63:32]}};
        p_r_M_real_V_reg_314 <= p_r_M_real_V_fu_197_p1;
        p_y_M_imag_V_read_a_reg_309 <= {{coefs_q0[63:32]}};
        tmp_5_reg_304 <= tmp_5_fu_183_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp1_i_i_cast_reg_353 <= grp_fu_223_p2;
        tmp_1_i_i_cast_reg_358 <= grp_fu_229_p2;
        tmp_2_i_i_cast_reg_363 <= grp_fu_235_p2;
        tmp_3_i_i_cast_reg_368 <= grp_fu_241_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        coefs_ce0 = 1'b1;
    end else begin
        coefs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_xk1_blk_n = input_xk1_empty_n;
    end else begin
        input_xk1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_xk2_empty_n == 1'b0) | (input_xk1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_xk1_read = 1'b1;
    end else begin
        input_xk1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_xk2_blk_n = input_xk2_empty_n;
    end else begin
        input_xk2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_xk2_empty_n == 1'b0) | (input_xk1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_xk2_read = 1'b1;
    end else begin
        input_xk2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        out_r_blk_n = out_r_full_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_reg_300 == 1'd0) & (out_r_full_n == 1'b0)) & (icmp_reg_300 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        out_r_write = 1'b1;
    end else begin
        out_r_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_reg_300 == 1'd0) & (out_r_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        output_xk1_ce0 = 1'b1;
    end else begin
        output_xk1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_reg_300 == 1'd0) & (out_r_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        output_xk1_we0 = 1'b1;
    end else begin
        output_xk1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((input_xk2_empty_n == 1'b0) | (input_xk1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((icmp_reg_300 == 1'd0) & (out_r_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10 = ((icmp_reg_300 == 1'd0) & (out_r_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((input_xk2_empty_n == 1'b0) | (input_xk1_empty_n == 1'b0));
end

assign coefs_address0 = tmp_fu_162_p1;

assign exitcond_fu_150_p2 = ((i_reg_139 == 12'd2048) ? 1'b1 : 1'b0);

assign grp_fu_223_p0 = tmp_1_fu_211_p1;

assign grp_fu_223_p1 = tmp_2_fu_214_p1;

assign grp_fu_229_p0 = tmp_3_fu_217_p1;

assign grp_fu_229_p1 = tmp_4_fu_220_p1;

assign grp_fu_235_p0 = tmp_1_fu_211_p1;

assign grp_fu_235_p1 = tmp_4_fu_220_p1;

assign grp_fu_241_p0 = tmp_2_fu_214_p1;

assign grp_fu_241_p1 = tmp_3_fu_217_p1;

assign i_2_fu_156_p2 = (i_reg_139 + 12'd1);

assign icmp_fu_177_p2 = ((tmp_7_fu_167_p4 == 3'd0) ? 1'b1 : 1'b0);

assign out_r_din = input_xk2_read_reg_324;

assign output_xk1_address0 = tmp_reg_290;

assign output_xk1_d0 = {{complex_M_imag_V_wr_reg_378}, {complex_M_real_V_wr_reg_373}};

assign p_Val2_1_fu_261_p2 = (tmp_3_i_i_cast_reg_368 + tmp_2_i_i_cast_reg_363);

assign p_Val2_s_fu_247_p2 = (tmp1_i_i_cast_reg_353 - tmp_1_i_i_cast_reg_358);

assign p_r_M_real_V_fu_197_p1 = input_xk1_dout[31:0];

assign tmp_1_fu_211_p1 = $signed(p_r_M_real_V_reg_314);

assign tmp_2_fu_214_p1 = $signed(tmp_5_reg_304);

assign tmp_3_fu_217_p1 = $signed(p_r_M_imag_V_reg_319);

assign tmp_4_fu_220_p1 = $signed(p_y_M_imag_V_read_a_reg_309);

assign tmp_5_fu_183_p1 = coefs_q0[31:0];

assign tmp_7_fu_167_p4 = {{i_reg_139[11:9]}};

assign tmp_fu_162_p1 = i_reg_139;

always @ (posedge ap_clk) begin
    tmp_reg_290[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //dummy_proc_be
