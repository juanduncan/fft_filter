// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dummy_proc_be_HH_
#define _dummy_proc_be_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "filter_top_mul_32dEe.h"

namespace ap_rtl {

struct dummy_proc_be : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > coefs_address0;
    sc_out< sc_logic > coefs_ce0;
    sc_in< sc_lv<64> > coefs_q0;
    sc_in< sc_lv<64> > input_xk1_dout;
    sc_in< sc_logic > input_xk1_empty_n;
    sc_out< sc_logic > input_xk1_read;
    sc_in< sc_lv<64> > input_xk2_dout;
    sc_in< sc_logic > input_xk2_empty_n;
    sc_out< sc_logic > input_xk2_read;
    sc_out< sc_lv<11> > output_xk1_address0;
    sc_out< sc_logic > output_xk1_ce0;
    sc_out< sc_logic > output_xk1_we0;
    sc_out< sc_lv<64> > output_xk1_d0;
    sc_out< sc_lv<64> > out_r_din;
    sc_in< sc_logic > out_r_full_n;
    sc_out< sc_logic > out_r_write;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    dummy_proc_be(sc_module_name name);
    SC_HAS_PROCESS(dummy_proc_be);

    ~dummy_proc_be();

    sc_trace_file* mVcdFile;

    filter_top_mul_32dEe<1,5,32,32,63>* filter_top_mul_32dEe_U10;
    filter_top_mul_32dEe<1,5,32,32,63>* filter_top_mul_32dEe_U11;
    filter_top_mul_32dEe<1,5,32,32,63>* filter_top_mul_32dEe_U12;
    filter_top_mul_32dEe<1,5,32,32,63>* filter_top_mul_32dEe_U13;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_xk1_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > input_xk2_blk_n;
    sc_signal< sc_logic > out_r_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > icmp_reg_300;
    sc_signal< sc_lv<12> > i_2_fu_156_p2;
    sc_signal< sc_lv<12> > i_2_reg_285;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_fu_162_p1;
    sc_signal< sc_lv<64> > tmp_reg_290;
    sc_signal< sc_lv<1> > exitcond_fu_150_p2;
    sc_signal< sc_lv<1> > icmp_fu_177_p2;
    sc_signal< sc_lv<32> > tmp_5_fu_183_p1;
    sc_signal< sc_lv<32> > tmp_5_reg_304;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<32> > p_y_M_imag_V_read_a_reg_309;
    sc_signal< sc_lv<32> > p_r_M_real_V_fu_197_p1;
    sc_signal< sc_lv<32> > p_r_M_real_V_reg_314;
    sc_signal< sc_lv<32> > p_r_M_imag_V_reg_319;
    sc_signal< sc_lv<64> > input_xk2_read_reg_324;
    sc_signal< sc_lv<63> > tmp_1_fu_211_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<63> > tmp_2_fu_214_p1;
    sc_signal< sc_lv<63> > tmp_3_fu_217_p1;
    sc_signal< sc_lv<63> > tmp_4_fu_220_p1;
    sc_signal< sc_lv<63> > grp_fu_223_p2;
    sc_signal< sc_lv<63> > tmp1_i_i_cast_reg_353;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<63> > grp_fu_229_p2;
    sc_signal< sc_lv<63> > tmp_1_i_i_cast_reg_358;
    sc_signal< sc_lv<63> > grp_fu_235_p2;
    sc_signal< sc_lv<63> > tmp_2_i_i_cast_reg_363;
    sc_signal< sc_lv<63> > grp_fu_241_p2;
    sc_signal< sc_lv<63> > tmp_3_i_i_cast_reg_368;
    sc_signal< sc_lv<32> > complex_M_real_V_wr_reg_373;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > complex_M_imag_V_wr_reg_378;
    sc_signal< sc_lv<12> > i_reg_139;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state10;
    sc_signal< sc_lv<3> > tmp_7_fu_167_p4;
    sc_signal< sc_lv<32> > grp_fu_223_p0;
    sc_signal< sc_lv<32> > grp_fu_223_p1;
    sc_signal< sc_lv<32> > grp_fu_229_p0;
    sc_signal< sc_lv<32> > grp_fu_229_p1;
    sc_signal< sc_lv<32> > grp_fu_235_p0;
    sc_signal< sc_lv<32> > grp_fu_235_p1;
    sc_signal< sc_lv<32> > grp_fu_241_p0;
    sc_signal< sc_lv<32> > grp_fu_241_p1;
    sc_signal< sc_lv<63> > p_Val2_s_fu_247_p2;
    sc_signal< sc_lv<63> > p_Val2_1_fu_261_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_800;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_3E;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state1();
    void thread_ap_block_state10();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_coefs_address0();
    void thread_coefs_ce0();
    void thread_exitcond_fu_150_p2();
    void thread_grp_fu_223_p0();
    void thread_grp_fu_223_p1();
    void thread_grp_fu_229_p0();
    void thread_grp_fu_229_p1();
    void thread_grp_fu_235_p0();
    void thread_grp_fu_235_p1();
    void thread_grp_fu_241_p0();
    void thread_grp_fu_241_p1();
    void thread_i_2_fu_156_p2();
    void thread_icmp_fu_177_p2();
    void thread_input_xk1_blk_n();
    void thread_input_xk1_read();
    void thread_input_xk2_blk_n();
    void thread_input_xk2_read();
    void thread_out_r_blk_n();
    void thread_out_r_din();
    void thread_out_r_write();
    void thread_output_xk1_address0();
    void thread_output_xk1_ce0();
    void thread_output_xk1_d0();
    void thread_output_xk1_we0();
    void thread_p_Val2_1_fu_261_p2();
    void thread_p_Val2_s_fu_247_p2();
    void thread_p_r_M_real_V_fu_197_p1();
    void thread_tmp_1_fu_211_p1();
    void thread_tmp_2_fu_214_p1();
    void thread_tmp_3_fu_217_p1();
    void thread_tmp_4_fu_220_p1();
    void thread_tmp_5_fu_183_p1();
    void thread_tmp_7_fu_167_p4();
    void thread_tmp_fu_162_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
