// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dummy_proc_fe_HH_
#define _dummy_proc_fe_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dummy_proc_fe_detbkb.h"

namespace ap_rtl {

struct dummy_proc_fe : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > config_fwd_data_V_din;
    sc_in< sc_logic > config_fwd_data_V_full_n;
    sc_out< sc_logic > config_fwd_data_V_write;
    sc_out< sc_lv<16> > config_inv_data_V_din;
    sc_in< sc_logic > config_inv_data_V_full_n;
    sc_out< sc_logic > config_inv_data_V_write;
    sc_in< sc_lv<64> > in_r_dout;
    sc_in< sc_logic > in_r_empty_n;
    sc_out< sc_logic > in_r_read;
    sc_out< sc_lv<11> > input_xn2_address0;
    sc_out< sc_logic > input_xn2_ce0;
    sc_in< sc_lv<64> > input_xn2_q0;
    sc_out< sc_lv<64> > output_xn1_din;
    sc_in< sc_logic > output_xn1_full_n;
    sc_out< sc_logic > output_xn1_write;
    sc_out< sc_lv<64> > output_xn2_din;
    sc_in< sc_logic > output_xn2_full_n;
    sc_out< sc_logic > output_xn2_write;


    // Module declarations
    dummy_proc_fe(sc_module_name name);
    SC_HAS_PROCESS(dummy_proc_fe);

    ~dummy_proc_fe();

    sc_trace_file* mVcdFile;

    dummy_proc_fe_detbkb* detector_tail_M_rea_U;
    dummy_proc_fe_detbkb* detector_tail_M_ima_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > detector_tail_M_rea_address0;
    sc_signal< sc_logic > detector_tail_M_rea_ce0;
    sc_signal< sc_logic > detector_tail_M_rea_we0;
    sc_signal< sc_lv<32> > detector_tail_M_rea_q0;
    sc_signal< sc_lv<9> > detector_tail_M_ima_address0;
    sc_signal< sc_logic > detector_tail_M_ima_ce0;
    sc_signal< sc_logic > detector_tail_M_ima_we0;
    sc_signal< sc_lv<32> > detector_tail_M_ima_q0;
    sc_signal< sc_logic > config_fwd_data_V_blk_n;
    sc_signal< sc_logic > config_inv_data_V_blk_n;
    sc_signal< sc_logic > in_r_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_fu_256_p2;
    sc_signal< sc_logic > output_xn1_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > icmp_reg_324;
    sc_signal< sc_logic > output_xn2_blk_n;
    sc_signal< sc_lv<12> > i_1_fu_235_p2;
    sc_signal< sc_lv<12> > i_1_reg_303;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_fu_241_p1;
    sc_signal< sc_lv<64> > tmp_reg_308;
    sc_signal< sc_lv<1> > exitcond_fu_229_p2;
    sc_signal< sc_lv<64> > input_xn2_load_reg_319;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<32> > tmp_2_fu_262_p1;
    sc_signal< sc_lv<32> > tmp_2_reg_328;
    sc_signal< sc_lv<32> > in_M_imag_V_load_ne_reg_333;
    sc_signal< sc_lv<1> > tmp_8_fu_276_p2;
    sc_signal< sc_lv<1> > tmp_8_reg_338;
    sc_signal< sc_lv<12> > tmp_9_fu_282_p2;
    sc_signal< sc_lv<12> > tmp_9_reg_342;
    sc_signal< sc_lv<32> > detector_tail_M_rea_1_reg_357;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > detector_tail_M_ima_1_reg_362;
    sc_signal< sc_lv<12> > i_reg_217;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state7;
    sc_signal< sc_lv<64> > tmp_4_fu_288_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > output_xn1_M_imag_V_fu_293_p3;
    sc_signal< sc_lv<3> > tmp_1_fu_246_p4;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<16> ap_const_lv16_C3F;
    static const sc_lv<16> ap_const_lv16_2;
    static const sc_lv<12> ap_const_lv12_800;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<12> ap_const_lv12_5FF;
    static const sc_lv<12> ap_const_lv12_A00;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state1();
    void thread_ap_block_state4();
    void thread_ap_block_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_config_fwd_data_V_blk_n();
    void thread_config_fwd_data_V_din();
    void thread_config_fwd_data_V_write();
    void thread_config_inv_data_V_blk_n();
    void thread_config_inv_data_V_din();
    void thread_config_inv_data_V_write();
    void thread_detector_tail_M_ima_address0();
    void thread_detector_tail_M_ima_ce0();
    void thread_detector_tail_M_ima_we0();
    void thread_detector_tail_M_rea_address0();
    void thread_detector_tail_M_rea_ce0();
    void thread_detector_tail_M_rea_we0();
    void thread_exitcond_fu_229_p2();
    void thread_i_1_fu_235_p2();
    void thread_icmp_fu_256_p2();
    void thread_in_r_blk_n();
    void thread_in_r_read();
    void thread_input_xn2_address0();
    void thread_input_xn2_ce0();
    void thread_output_xn1_M_imag_V_fu_293_p3();
    void thread_output_xn1_blk_n();
    void thread_output_xn1_din();
    void thread_output_xn1_write();
    void thread_output_xn2_blk_n();
    void thread_output_xn2_din();
    void thread_output_xn2_write();
    void thread_tmp_1_fu_246_p4();
    void thread_tmp_2_fu_262_p1();
    void thread_tmp_4_fu_288_p1();
    void thread_tmp_8_fu_276_p2();
    void thread_tmp_9_fu_282_p2();
    void thread_tmp_fu_241_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
