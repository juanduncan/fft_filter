-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_fe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    config_fwd_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_fwd_data_V_full_n : IN STD_LOGIC;
    config_fwd_data_V_write : OUT STD_LOGIC;
    config_inv_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_inv_data_V_full_n : IN STD_LOGIC;
    config_inv_data_V_write : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    input_xn2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_xn2_ce0 : OUT STD_LOGIC;
    input_xn2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_xn1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_xn1_full_n : IN STD_LOGIC;
    output_xn1_write : OUT STD_LOGIC;
    output_xn2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_xn2_full_n : IN STD_LOGIC;
    output_xn2_write : OUT STD_LOGIC );
end;


architecture behav of dummy_proc_fe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_C3F : STD_LOGIC_VECTOR (15 downto 0) := "0000110000111111";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_5FF : STD_LOGIC_VECTOR (11 downto 0) := "010111111111";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal detector_tail_M_rea_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal detector_tail_M_rea_ce0 : STD_LOGIC;
    signal detector_tail_M_rea_we0 : STD_LOGIC;
    signal detector_tail_M_rea_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal detector_tail_M_ima_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal detector_tail_M_ima_ce0 : STD_LOGIC;
    signal detector_tail_M_ima_we0 : STD_LOGIC;
    signal detector_tail_M_ima_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_fwd_data_V_blk_n : STD_LOGIC;
    signal config_inv_data_V_blk_n : STD_LOGIC;
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_xn1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_xn2_blk_n : STD_LOGIC;
    signal i_1_fu_235_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_303 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_308 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_xn2_load_reg_319 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal tmp_2_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_M_imag_V_load_ne_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_reg_342 : STD_LOGIC_VECTOR (11 downto 0);
    signal detector_tail_M_rea_1_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal detector_tail_M_ima_1_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_217 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal tmp_4_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_xn1_M_imag_V_fu_293_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_246_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component dummy_proc_fe_detbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    detector_tail_M_rea_U : component dummy_proc_fe_detbkb
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => detector_tail_M_rea_address0,
        ce0 => detector_tail_M_rea_ce0,
        we0 => detector_tail_M_rea_we0,
        d0 => tmp_2_reg_328,
        q0 => detector_tail_M_rea_q0);

    detector_tail_M_ima_U : component dummy_proc_fe_detbkb
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => detector_tail_M_ima_address0,
        ce0 => detector_tail_M_ima_ce0,
        we0 => detector_tail_M_ima_we0,
        d0 => in_M_imag_V_load_ne_reg_333,
        q0 => detector_tail_M_ima_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_reg_324 = ap_const_lv1_1) and (output_xn1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_217 <= i_1_reg_303;
            elsif ((not(((config_inv_data_V_full_n = ap_const_logic_0) or (config_fwd_data_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_217 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                detector_tail_M_ima_1_reg_362 <= detector_tail_M_ima_q0;
                detector_tail_M_rea_1_reg_357 <= detector_tail_M_rea_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_303 <= i_1_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_reg_324 <= icmp_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                in_M_imag_V_load_ne_reg_333 <= in_r_dout(63 downto 32);
                tmp_2_reg_328 <= tmp_2_fu_262_p1;
                tmp_8_reg_338 <= tmp_8_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_xn2_load_reg_319 <= input_xn2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (tmp_8_fu_276_p2 = ap_const_lv1_1) and (icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_9_reg_342 <= tmp_9_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_308(11 downto 0) <= tmp_fu_241_p1(11 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_308(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, config_fwd_data_V_full_n, config_inv_data_V_full_n, in_r_empty_n, output_xn1_full_n, output_xn2_full_n, ap_CS_fsm_state4, icmp_fu_256_p2, ap_CS_fsm_state7, icmp_reg_324, ap_CS_fsm_state2, exitcond_fu_229_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((config_inv_data_V_full_n = ap_const_logic_0) or (config_fwd_data_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (icmp_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if ((not(((icmp_reg_324 = ap_const_lv1_1) and (output_xn1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, config_fwd_data_V_full_n, config_inv_data_V_full_n)
    begin
                ap_block_state1 <= ((config_inv_data_V_full_n = ap_const_logic_0) or (config_fwd_data_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(in_r_empty_n, output_xn1_full_n, output_xn2_full_n, icmp_fu_256_p2)
    begin
                ap_block_state4 <= ((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state7_assign_proc : process(output_xn1_full_n, icmp_reg_324)
    begin
                ap_block_state7 <= ((icmp_reg_324 = ap_const_lv1_1) and (output_xn1_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_fu_229_p2)
    begin
        if (((exitcond_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_229_p2)
    begin
        if (((exitcond_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    config_fwd_data_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, config_fwd_data_V_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_fwd_data_V_blk_n <= config_fwd_data_V_full_n;
        else 
            config_fwd_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    config_fwd_data_V_din <= ap_const_lv16_C3F;

    config_fwd_data_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, config_fwd_data_V_full_n, config_inv_data_V_full_n)
    begin
        if ((not(((config_inv_data_V_full_n = ap_const_logic_0) or (config_fwd_data_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_fwd_data_V_write <= ap_const_logic_1;
        else 
            config_fwd_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    config_inv_data_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, config_inv_data_V_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_inv_data_V_blk_n <= config_inv_data_V_full_n;
        else 
            config_inv_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    config_inv_data_V_din <= ap_const_lv16_2;

    config_inv_data_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, config_fwd_data_V_full_n, config_inv_data_V_full_n)
    begin
        if ((not(((config_inv_data_V_full_n = ap_const_logic_0) or (config_fwd_data_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_inv_data_V_write <= ap_const_logic_1;
        else 
            config_inv_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    detector_tail_M_ima_address0_assign_proc : process(ap_CS_fsm_state4, tmp_reg_308, tmp_4_fu_288_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            detector_tail_M_ima_address0 <= tmp_4_fu_288_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            detector_tail_M_ima_address0 <= tmp_reg_308(9 - 1 downto 0);
        else 
            detector_tail_M_ima_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    detector_tail_M_ima_ce0_assign_proc : process(in_r_empty_n, output_xn1_full_n, output_xn2_full_n, ap_CS_fsm_state4, icmp_fu_256_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            detector_tail_M_ima_ce0 <= ap_const_logic_1;
        else 
            detector_tail_M_ima_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    detector_tail_M_ima_we0_assign_proc : process(tmp_8_reg_338, ap_CS_fsm_state5)
    begin
        if (((tmp_8_reg_338 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            detector_tail_M_ima_we0 <= ap_const_logic_1;
        else 
            detector_tail_M_ima_we0 <= ap_const_logic_0;
        end if; 
    end process;


    detector_tail_M_rea_address0_assign_proc : process(ap_CS_fsm_state4, tmp_reg_308, tmp_4_fu_288_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            detector_tail_M_rea_address0 <= tmp_4_fu_288_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            detector_tail_M_rea_address0 <= tmp_reg_308(9 - 1 downto 0);
        else 
            detector_tail_M_rea_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    detector_tail_M_rea_ce0_assign_proc : process(in_r_empty_n, output_xn1_full_n, output_xn2_full_n, ap_CS_fsm_state4, icmp_fu_256_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            detector_tail_M_rea_ce0 <= ap_const_logic_1;
        else 
            detector_tail_M_rea_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    detector_tail_M_rea_we0_assign_proc : process(tmp_8_reg_338, ap_CS_fsm_state5)
    begin
        if (((tmp_8_reg_338 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            detector_tail_M_rea_we0 <= ap_const_logic_1;
        else 
            detector_tail_M_rea_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_229_p2 <= "1" when (i_reg_217 = ap_const_lv12_800) else "0";
    i_1_fu_235_p2 <= std_logic_vector(unsigned(i_reg_217) + unsigned(ap_const_lv12_1));
    icmp_fu_256_p2 <= "1" when (tmp_1_fu_246_p4 = ap_const_lv3_0) else "0";

    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_state4, icmp_fu_256_p2)
    begin
        if (((icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(in_r_empty_n, output_xn1_full_n, output_xn2_full_n, ap_CS_fsm_state4, icmp_fu_256_p2)
    begin
        if ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;

    input_xn2_address0 <= tmp_fu_241_p1(11 - 1 downto 0);

    input_xn2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_xn2_ce0 <= ap_const_logic_1;
        else 
            input_xn2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_xn1_M_imag_V_fu_293_p3 <= (detector_tail_M_ima_1_reg_362 & detector_tail_M_rea_1_reg_357);

    output_xn1_blk_n_assign_proc : process(output_xn1_full_n, ap_CS_fsm_state4, icmp_fu_256_p2, ap_CS_fsm_state7, icmp_reg_324)
    begin
        if ((((icmp_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            output_xn1_blk_n <= output_xn1_full_n;
        else 
            output_xn1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_xn1_din_assign_proc : process(in_r_dout, in_r_empty_n, output_xn1_full_n, output_xn2_full_n, ap_CS_fsm_state4, icmp_fu_256_p2, ap_CS_fsm_state7, icmp_reg_324, output_xn1_M_imag_V_fu_293_p3)
    begin
        if ((not(((icmp_reg_324 = ap_const_lv1_1) and (output_xn1_full_n = ap_const_logic_0))) and (icmp_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_xn1_din <= output_xn1_M_imag_V_fu_293_p3;
        elsif ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_xn1_din <= in_r_dout;
        else 
            output_xn1_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_xn1_write_assign_proc : process(in_r_empty_n, output_xn1_full_n, output_xn2_full_n, ap_CS_fsm_state4, icmp_fu_256_p2, ap_CS_fsm_state7, icmp_reg_324)
    begin
        if (((not(((icmp_reg_324 = ap_const_lv1_1) and (output_xn1_full_n = ap_const_logic_0))) and (icmp_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (icmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            output_xn1_write <= ap_const_logic_1;
        else 
            output_xn1_write <= ap_const_logic_0;
        end if; 
    end process;


    output_xn2_blk_n_assign_proc : process(output_xn2_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_xn2_blk_n <= output_xn2_full_n;
        else 
            output_xn2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_xn2_din <= input_xn2_load_reg_319;

    output_xn2_write_assign_proc : process(in_r_empty_n, output_xn1_full_n, output_xn2_full_n, ap_CS_fsm_state4, icmp_fu_256_p2)
    begin
        if ((not(((output_xn2_full_n = ap_const_logic_0) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (output_xn1_full_n = ap_const_logic_0)) or ((icmp_fu_256_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_xn2_write <= ap_const_logic_1;
        else 
            output_xn2_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_246_p4 <= i_reg_217(11 downto 9);
    tmp_2_fu_262_p1 <= in_r_dout(32 - 1 downto 0);
    tmp_4_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_342),64));
    tmp_8_fu_276_p2 <= "1" when (unsigned(i_reg_217) > unsigned(ap_const_lv12_5FF)) else "0";
    tmp_9_fu_282_p2 <= std_logic_vector(unsigned(i_reg_217) + unsigned(ap_const_lv12_A00));
    tmp_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_217),64));
end behav;
