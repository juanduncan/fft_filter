-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_be is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    coefs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    coefs_ce0 : OUT STD_LOGIC;
    coefs_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_xk1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    input_xk1_empty_n : IN STD_LOGIC;
    input_xk1_read : OUT STD_LOGIC;
    input_xk2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    input_xk2_empty_n : IN STD_LOGIC;
    input_xk2_read : OUT STD_LOGIC;
    output_xk1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_xk1_ce0 : OUT STD_LOGIC;
    output_xk1_we0 : OUT STD_LOGIC;
    output_xk1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC );
end;


architecture behav of dummy_proc_be is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_xk1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_xk2_blk_n : STD_LOGIC;
    signal out_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_156_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_2_reg_285 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal p_y_M_imag_V_read_a_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_V_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_V_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_V_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_xk2_read_reg_324 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_211_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_214_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_217_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_4_fu_220_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp1_i_i_cast_reg_353 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_i_i_cast_reg_358 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_i_i_cast_reg_363 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_i_i_cast_reg_368 : STD_LOGIC_VECTOR (62 downto 0);
    signal complex_M_real_V_wr_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal complex_M_imag_V_wr_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_139 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state10 : BOOLEAN;
    signal tmp_7_fu_167_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_247_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_1_fu_261_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component filter_top_mul_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;



begin
    filter_top_mul_32dEe_U10 : component filter_top_mul_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_223_p0,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    filter_top_mul_32dEe_U11 : component filter_top_mul_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_229_p0,
        din1 => grp_fu_229_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);

    filter_top_mul_32dEe_U12 : component filter_top_mul_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        din1 => grp_fu_235_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    filter_top_mul_32dEe_U13 : component filter_top_mul_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_241_p0,
        din1 => grp_fu_241_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_reg_300 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_reg_139 <= i_2_reg_285;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_139 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                complex_M_imag_V_wr_reg_378 <= p_Val2_1_fu_261_p2(62 downto 31);
                complex_M_real_V_wr_reg_373 <= p_Val2_s_fu_247_p2(62 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_285 <= i_2_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_300 <= icmp_fu_177_p2;
                    tmp_reg_290(11 downto 0) <= tmp_fu_162_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_xk2_empty_n = ap_const_logic_0) or (input_xk1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                input_xk2_read_reg_324 <= input_xk2_dout;
                p_r_M_imag_V_reg_319 <= input_xk1_dout(63 downto 32);
                p_r_M_real_V_reg_314 <= p_r_M_real_V_fu_197_p1;
                p_y_M_imag_V_read_a_reg_309 <= coefs_q0(63 downto 32);
                tmp_5_reg_304 <= tmp_5_fu_183_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp1_i_i_cast_reg_353 <= grp_fu_223_p2;
                tmp_1_i_i_cast_reg_358 <= grp_fu_229_p2;
                tmp_2_i_i_cast_reg_363 <= grp_fu_235_p2;
                tmp_3_i_i_cast_reg_368 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    tmp_reg_290(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, input_xk1_empty_n, input_xk2_empty_n, out_r_full_n, ap_CS_fsm_state3, ap_CS_fsm_state10, icmp_reg_300, ap_CS_fsm_state2, exitcond_fu_150_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((input_xk2_empty_n = ap_const_logic_0) or (input_xk1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((icmp_reg_300 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_assign_proc : process(out_r_full_n, icmp_reg_300)
    begin
                ap_block_state10 <= ((icmp_reg_300 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(input_xk1_empty_n, input_xk2_empty_n)
    begin
                ap_block_state3 <= ((input_xk2_empty_n = ap_const_logic_0) or (input_xk1_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_fu_150_p2)
    begin
        if (((exitcond_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_150_p2)
    begin
        if (((exitcond_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    coefs_address0 <= tmp_fu_162_p1(11 - 1 downto 0);

    coefs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            coefs_ce0 <= ap_const_logic_1;
        else 
            coefs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_150_p2 <= "1" when (i_reg_139 = ap_const_lv12_800) else "0";
    grp_fu_223_p0 <= tmp_1_fu_211_p1(32 - 1 downto 0);
    grp_fu_223_p1 <= tmp_2_fu_214_p1(32 - 1 downto 0);
    grp_fu_229_p0 <= tmp_3_fu_217_p1(32 - 1 downto 0);
    grp_fu_229_p1 <= tmp_4_fu_220_p1(32 - 1 downto 0);
    grp_fu_235_p0 <= tmp_1_fu_211_p1(32 - 1 downto 0);
    grp_fu_235_p1 <= tmp_4_fu_220_p1(32 - 1 downto 0);
    grp_fu_241_p0 <= tmp_2_fu_214_p1(32 - 1 downto 0);
    grp_fu_241_p1 <= tmp_3_fu_217_p1(32 - 1 downto 0);
    i_2_fu_156_p2 <= std_logic_vector(unsigned(i_reg_139) + unsigned(ap_const_lv12_1));
    icmp_fu_177_p2 <= "1" when (tmp_7_fu_167_p4 = ap_const_lv3_0) else "0";

    input_xk1_blk_n_assign_proc : process(input_xk1_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_xk1_blk_n <= input_xk1_empty_n;
        else 
            input_xk1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_xk1_read_assign_proc : process(input_xk1_empty_n, input_xk2_empty_n, ap_CS_fsm_state3)
    begin
        if ((not(((input_xk2_empty_n = ap_const_logic_0) or (input_xk1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_xk1_read <= ap_const_logic_1;
        else 
            input_xk1_read <= ap_const_logic_0;
        end if; 
    end process;


    input_xk2_blk_n_assign_proc : process(input_xk2_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_xk2_blk_n <= input_xk2_empty_n;
        else 
            input_xk2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_xk2_read_assign_proc : process(input_xk1_empty_n, input_xk2_empty_n, ap_CS_fsm_state3)
    begin
        if ((not(((input_xk2_empty_n = ap_const_logic_0) or (input_xk1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_xk2_read <= ap_const_logic_1;
        else 
            input_xk2_read <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_assign_proc : process(out_r_full_n, ap_CS_fsm_state10, icmp_reg_300)
    begin
        if (((icmp_reg_300 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_din <= input_xk2_read_reg_324;

    out_r_write_assign_proc : process(out_r_full_n, ap_CS_fsm_state10, icmp_reg_300)
    begin
        if ((not(((icmp_reg_300 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0))) and (icmp_reg_300 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    output_xk1_address0 <= tmp_reg_290(11 - 1 downto 0);

    output_xk1_ce0_assign_proc : process(out_r_full_n, ap_CS_fsm_state10, icmp_reg_300)
    begin
        if ((not(((icmp_reg_300 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_xk1_ce0 <= ap_const_logic_1;
        else 
            output_xk1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_xk1_d0 <= (complex_M_imag_V_wr_reg_378 & complex_M_real_V_wr_reg_373);

    output_xk1_we0_assign_proc : process(out_r_full_n, ap_CS_fsm_state10, icmp_reg_300)
    begin
        if ((not(((icmp_reg_300 = ap_const_lv1_0) and (out_r_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_xk1_we0 <= ap_const_logic_1;
        else 
            output_xk1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_261_p2 <= std_logic_vector(unsigned(tmp_3_i_i_cast_reg_368) + unsigned(tmp_2_i_i_cast_reg_363));
    p_Val2_s_fu_247_p2 <= std_logic_vector(unsigned(tmp1_i_i_cast_reg_353) - unsigned(tmp_1_i_i_cast_reg_358));
    p_r_M_real_V_fu_197_p1 <= input_xk1_dout(32 - 1 downto 0);
        tmp_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_r_M_real_V_reg_314),63));

        tmp_2_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_304),63));

        tmp_3_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_r_M_imag_V_reg_319),63));

        tmp_4_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_y_M_imag_V_read_a_reg_309),63));

    tmp_5_fu_183_p1 <= coefs_q0(32 - 1 downto 0);
    tmp_7_fu_167_p4 <= i_reg_139(11 downto 9);
    tmp_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_139),64));
end behav;
