// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filter_top_dummy_proc_fe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        config_fwd_data_V_din,
        config_fwd_data_V_full_n,
        config_fwd_data_V_write,
        config_inv_data_V_din,
        config_inv_data_V_full_n,
        config_inv_data_V_write,
        in_r,
        in_r_ap_vld,
        in_r_ap_ack,
        input_xn2_address0,
        input_xn2_ce0,
        input_xn2_q0,
        output_xn1_din,
        output_xn1_full_n,
        output_xn1_write,
        output_xn2_din,
        output_xn2_full_n,
        output_xn2_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv13_C3F = 13'b110000111111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv13_2 = 13'b10;
parameter    ap_const_lv12_800 = 12'b100000000000;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv12_5FF = 12'b10111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] config_fwd_data_V_din;
input   config_fwd_data_V_full_n;
output   config_fwd_data_V_write;
output  [15:0] config_inv_data_V_din;
input   config_inv_data_V_full_n;
output   config_inv_data_V_write;
input  [63:0] in_r;
input   in_r_ap_vld;
output   in_r_ap_ack;
output  [10:0] input_xn2_address0;
output   input_xn2_ce0;
input  [63:0] input_xn2_q0;
output  [63:0] output_xn1_din;
input   output_xn1_full_n;
output   output_xn1_write;
output  [63:0] output_xn2_din;
input   output_xn2_full_n;
output   output_xn2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg config_fwd_data_V_write;
reg config_inv_data_V_write;
reg in_r_ap_ack;
reg input_xn2_ce0;
reg[63:0] output_xn1_din;
reg output_xn1_write;
reg output_xn2_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
reg   [8:0] detector_tail_M_real_V_address0;
reg    detector_tail_M_real_V_ce0;
reg    detector_tail_M_real_V_we0;
wire   [31:0] detector_tail_M_real_V_d0;
wire   [31:0] detector_tail_M_real_V_q0;
reg   [8:0] detector_tail_M_imag_V_address0;
reg    detector_tail_M_imag_V_ce0;
reg    detector_tail_M_imag_V_we0;
wire   [31:0] detector_tail_M_imag_V_d0;
wire   [31:0] detector_tail_M_imag_V_q0;
wire   [11:0] i_1_fu_216_p2;
reg   [11:0] i_1_reg_285;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_82;
wire   [63:0] tmp_fu_222_p1;
reg   [63:0] tmp_reg_290;
wire   [0:0] exitcond_fu_210_p2;
reg   [63:0] input_xn2_load_reg_301;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_98;
wire   [0:0] icmp_fu_237_p2;
reg   [0:0] icmp_reg_306;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_107;
reg    ap_sig_bdd_117;
reg   [31:0] detector_tail_M_real_V_load_reg_323;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_132;
reg   [31:0] detector_tail_M_imag_V_load_reg_328;
reg   [11:0] i_reg_171;
reg    ap_sig_bdd_145;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_153;
reg    ap_sig_bdd_158;
wire   [63:0] tmp_6_fu_269_p1;
wire   [0:0] tmp_4_fu_259_p2;
wire   [63:0] output_xn1_M_imag_V_addr_fu_275_p3;
wire   [2:0] tmp_1_fu_227_p4;
wire   [8:0] tmp_3_fu_265_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_sig_bdd_167;


filter_top_dummy_proc_fe_detector_tail_M_real_V #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
detector_tail_M_real_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( detector_tail_M_real_V_address0 ),
    .ce0( detector_tail_M_real_V_ce0 ),
    .we0( detector_tail_M_real_V_we0 ),
    .d0( detector_tail_M_real_V_d0 ),
    .q0( detector_tail_M_real_V_q0 )
);

filter_top_dummy_proc_fe_detector_tail_M_real_V #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
detector_tail_M_imag_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( detector_tail_M_imag_V_address0 ),
    .ce0( detector_tail_M_imag_V_ce0 ),
    .we0( detector_tail_M_imag_V_we0 ),
    .d0( detector_tail_M_imag_V_d0 ),
    .q0( detector_tail_M_imag_V_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_210_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~ap_sig_bdd_158)) begin
        i_reg_171 <= i_1_reg_285;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_145)) begin
        i_reg_171 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        detector_tail_M_imag_V_load_reg_328 <= detector_tail_M_imag_V_q0;
        detector_tail_M_real_V_load_reg_323 <= detector_tail_M_real_V_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_285 <= i_1_fu_216_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_117)) begin
        icmp_reg_306 <= icmp_fu_237_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_xn2_load_reg_301 <= input_xn2_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_210_p2 == ap_const_lv1_0))) begin
        tmp_reg_290[0] <= tmp_fu_222_p1[0];
tmp_reg_290[1] <= tmp_fu_222_p1[1];
tmp_reg_290[2] <= tmp_fu_222_p1[2];
tmp_reg_290[3] <= tmp_fu_222_p1[3];
tmp_reg_290[4] <= tmp_fu_222_p1[4];
tmp_reg_290[5] <= tmp_fu_222_p1[5];
tmp_reg_290[6] <= tmp_fu_222_p1[6];
tmp_reg_290[7] <= tmp_fu_222_p1[7];
tmp_reg_290[8] <= tmp_fu_222_p1[8];
tmp_reg_290[9] <= tmp_fu_222_p1[9];
tmp_reg_290[10] <= tmp_fu_222_p1[10];
tmp_reg_290[11] <= tmp_fu_222_p1[11];
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_210_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_210_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_210_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_210_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_25)
begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_82)
begin
    if (ap_sig_bdd_82) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_98)
begin
    if (ap_sig_bdd_98) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_107)
begin
    if (ap_sig_bdd_107) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_132)
begin
    if (ap_sig_bdd_132) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_153)
begin
    if (ap_sig_bdd_153) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// config_fwd_data_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_145)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_145)) begin
        config_fwd_data_V_write = ap_const_logic_1;
    end else begin
        config_fwd_data_V_write = ap_const_logic_0;
    end
end

/// config_inv_data_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_145)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_145)) begin
        config_inv_data_V_write = ap_const_logic_1;
    end else begin
        config_inv_data_V_write = ap_const_logic_0;
    end
end

/// detector_tail_M_imag_V_address0 assign process. ///
always @ (tmp_reg_290 or icmp_fu_237_p2 or ap_sig_cseq_ST_st4_fsm_3 or tmp_6_fu_269_p1 or ap_sig_bdd_167)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        if (ap_sig_bdd_167) begin
            detector_tail_M_imag_V_address0 = tmp_6_fu_269_p1;
        end else if (~(ap_const_lv1_0 == icmp_fu_237_p2)) begin
            detector_tail_M_imag_V_address0 = tmp_reg_290;
        end else begin
            detector_tail_M_imag_V_address0 = 'bx;
        end
    end else begin
        detector_tail_M_imag_V_address0 = 'bx;
    end
end

/// detector_tail_M_imag_V_ce0 assign process. ///
always @ (icmp_fu_237_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117 or tmp_4_fu_259_p2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_117 & ~(ap_const_lv1_0 == icmp_fu_237_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117 & ~(ap_const_lv1_0 == tmp_4_fu_259_p2)))) begin
        detector_tail_M_imag_V_ce0 = ap_const_logic_1;
    end else begin
        detector_tail_M_imag_V_ce0 = ap_const_logic_0;
    end
end

/// detector_tail_M_imag_V_we0 assign process. ///
always @ (icmp_fu_237_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117 or tmp_4_fu_259_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117 & ~(ap_const_lv1_0 == tmp_4_fu_259_p2))) begin
        detector_tail_M_imag_V_we0 = ap_const_logic_1;
    end else begin
        detector_tail_M_imag_V_we0 = ap_const_logic_0;
    end
end

/// detector_tail_M_real_V_address0 assign process. ///
always @ (tmp_reg_290 or icmp_fu_237_p2 or ap_sig_cseq_ST_st4_fsm_3 or tmp_6_fu_269_p1 or ap_sig_bdd_167)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        if (ap_sig_bdd_167) begin
            detector_tail_M_real_V_address0 = tmp_6_fu_269_p1;
        end else if (~(ap_const_lv1_0 == icmp_fu_237_p2)) begin
            detector_tail_M_real_V_address0 = tmp_reg_290;
        end else begin
            detector_tail_M_real_V_address0 = 'bx;
        end
    end else begin
        detector_tail_M_real_V_address0 = 'bx;
    end
end

/// detector_tail_M_real_V_ce0 assign process. ///
always @ (icmp_fu_237_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117 or tmp_4_fu_259_p2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_117 & ~(ap_const_lv1_0 == icmp_fu_237_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117 & ~(ap_const_lv1_0 == tmp_4_fu_259_p2)))) begin
        detector_tail_M_real_V_ce0 = ap_const_logic_1;
    end else begin
        detector_tail_M_real_V_ce0 = ap_const_logic_0;
    end
end

/// detector_tail_M_real_V_we0 assign process. ///
always @ (icmp_fu_237_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117 or tmp_4_fu_259_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117 & ~(ap_const_lv1_0 == tmp_4_fu_259_p2))) begin
        detector_tail_M_real_V_we0 = ap_const_logic_1;
    end else begin
        detector_tail_M_real_V_we0 = ap_const_logic_0;
    end
end

/// in_r_ap_ack assign process. ///
always @ (icmp_fu_237_p2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117)) begin
        in_r_ap_ack = ap_const_logic_1;
    end else begin
        in_r_ap_ack = ap_const_logic_0;
    end
end

/// input_xn2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        input_xn2_ce0 = ap_const_logic_1;
    end else begin
        input_xn2_ce0 = ap_const_logic_0;
    end
end

/// output_xn1_din assign process. ///
always @ (in_r or icmp_fu_237_p2 or icmp_reg_306 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_bdd_158 or output_xn1_M_imag_V_addr_fu_275_p3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == icmp_reg_306) & ~ap_sig_bdd_158)) begin
        output_xn1_din = output_xn1_M_imag_V_addr_fu_275_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117)) begin
        output_xn1_din = in_r;
    end else begin
        output_xn1_din = 'bx;
    end
end

/// output_xn1_write assign process. ///
always @ (icmp_fu_237_p2 or icmp_reg_306 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_bdd_158)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_lv1_0 == icmp_reg_306) & ~ap_sig_bdd_158))) begin
        output_xn1_write = ap_const_logic_1;
    end else begin
        output_xn1_write = ap_const_logic_0;
    end
end

/// output_xn2_write assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_bdd_117)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~ap_sig_bdd_117)) begin
        output_xn2_write = ap_const_logic_1;
    end else begin
        output_xn2_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond_fu_210_p2 or icmp_fu_237_p2 or ap_sig_bdd_117 or ap_sig_bdd_145 or ap_sig_bdd_158)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_145) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_fu_210_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (((ap_const_lv1_0 == icmp_fu_237_p2) & ~ap_sig_bdd_117)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else if ((~ap_sig_bdd_117 & ~(ap_const_lv1_0 == icmp_fu_237_p2))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~ap_sig_bdd_158) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_107 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_107 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_117 assign process. ///
always @ (in_r_ap_vld or output_xn1_full_n or output_xn2_full_n or icmp_fu_237_p2)
begin
    ap_sig_bdd_117 = ((output_xn2_full_n == ap_const_logic_0) | ((in_r_ap_vld == ap_const_logic_0) & (ap_const_lv1_0 == icmp_fu_237_p2)) | ((ap_const_lv1_0 == icmp_fu_237_p2) & (output_xn1_full_n == ap_const_logic_0)));
end

/// ap_sig_bdd_132 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_132 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_145 assign process. ///
always @ (ap_start or ap_done_reg or config_fwd_data_V_full_n or config_inv_data_V_full_n)
begin
    ap_sig_bdd_145 = ((config_fwd_data_V_full_n == ap_const_logic_0) | (config_inv_data_V_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_153 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_153 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_158 assign process. ///
always @ (output_xn1_full_n or icmp_reg_306)
begin
    ap_sig_bdd_158 = ((output_xn1_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == icmp_reg_306));
end

/// ap_sig_bdd_167 assign process. ///
always @ (icmp_fu_237_p2 or tmp_4_fu_259_p2)
begin
    ap_sig_bdd_167 = ((ap_const_lv1_0 == icmp_fu_237_p2) & ~(ap_const_lv1_0 == tmp_4_fu_259_p2));
end

/// ap_sig_bdd_25 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_82 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_82 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_98 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_98 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign config_fwd_data_V_din = {{ap_const_lv16_0[32'd15 : 32'd13]}, {ap_const_lv13_C3F}};
assign config_inv_data_V_din = {{ap_const_lv16_0[32'd15 : 32'd13]}, {ap_const_lv13_2}};
assign detector_tail_M_imag_V_d0 = {{in_r[ap_const_lv32_3F : ap_const_lv32_20]}};
assign detector_tail_M_real_V_d0 = in_r[31:0];
assign exitcond_fu_210_p2 = (i_reg_171 == ap_const_lv12_800? 1'b1: 1'b0);
assign i_1_fu_216_p2 = (i_reg_171 + ap_const_lv12_1);
assign icmp_fu_237_p2 = (tmp_1_fu_227_p4 == ap_const_lv3_0? 1'b1: 1'b0);
assign input_xn2_address0 = tmp_fu_222_p1;
assign output_xn1_M_imag_V_addr_fu_275_p3 = {{detector_tail_M_imag_V_load_reg_328}, {detector_tail_M_real_V_load_reg_323}};
assign output_xn2_din = input_xn2_load_reg_301;
assign tmp_1_fu_227_p4 = {{i_reg_171[ap_const_lv32_B : ap_const_lv32_9]}};
assign tmp_3_fu_265_p1 = i_reg_171[8:0];
assign tmp_4_fu_259_p2 = (i_reg_171 > ap_const_lv12_5FF? 1'b1: 1'b0);
assign tmp_6_fu_269_p1 = tmp_3_fu_265_p1;
assign tmp_fu_222_p1 = i_reg_171;
always @ (posedge ap_clk)
begin
    tmp_reg_290[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end



endmodule //filter_top_dummy_proc_fe

