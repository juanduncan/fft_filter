// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filter_top_dummy_proc_be (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        coefs_address0,
        coefs_ce0,
        coefs_q0,
        input_xk1_dout,
        input_xk1_empty_n,
        input_xk1_read,
        input_xk2_dout,
        input_xk2_empty_n,
        input_xk2_read,
        output_xk1_address0,
        output_xk1_ce0,
        output_xk1_we0,
        output_xk1_d0,
        out_r,
        out_r_ap_vld,
        out_r_ap_ack
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv12_800 = 12'b100000000000;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [10:0] coefs_address0;
output   coefs_ce0;
input  [63:0] coefs_q0;
input  [63:0] input_xk1_dout;
input   input_xk1_empty_n;
output   input_xk1_read;
input  [63:0] input_xk2_dout;
input   input_xk2_empty_n;
output   input_xk2_read;
output  [10:0] output_xk1_address0;
output   output_xk1_ce0;
output   output_xk1_we0;
output  [63:0] output_xk1_d0;
output  [63:0] out_r;
output   out_r_ap_vld;
input   out_r_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg coefs_ce0;
reg input_xk1_read;
reg input_xk2_read;
reg output_xk1_ce0;
reg output_xk1_we0;
reg out_r_ap_vld;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm = 12'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_31;
wire   [11:0] i_1_fu_129_p2;
reg   [11:0] i_1_reg_258;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_67;
wire   [63:0] tmp_fu_135_p1;
reg   [63:0] tmp_reg_263;
wire   [0:0] exitcond_fu_123_p2;
wire   [0:0] icmp_fu_150_p2;
reg   [0:0] icmp_reg_273;
wire   [31:0] tmp_5_fu_156_p1;
reg   [31:0] tmp_5_reg_277;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_86;
reg    ap_sig_bdd_91;
reg   [31:0] p_y_M_imag_V_read_assign_reg_282;
wire   [31:0] tmp_6_fu_170_p1;
reg   [31:0] tmp_6_reg_287;
reg   [31:0] p_x_M_imag_V_read_assign_reg_292;
reg   [63:0] input_xk2_read_reg_297;
wire  signed [62:0] tmp_1_fu_184_p1;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_109;
wire  signed [62:0] tmp_2_fu_187_p1;
wire  signed [62:0] tmp_3_fu_190_p1;
wire  signed [62:0] tmp_4_fu_193_p1;
wire  signed [62:0] grp_fu_196_p2;
reg  signed [62:0] tmp1_i_cast_reg_326;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_124;
wire  signed [62:0] grp_fu_202_p2;
reg  signed [62:0] tmp_2_i_cast_reg_331;
wire  signed [62:0] grp_fu_208_p2;
reg  signed [62:0] tmp_i_cast_reg_336;
wire  signed [62:0] grp_fu_214_p2;
reg  signed [62:0] tmp_3_i_cast_reg_341;
reg   [31:0] p_r_M_real_V_reg_346;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_139;
reg   [31:0] p_r_M_imag_V_reg_351;
reg   [11:0] i_reg_111;
reg    ap_sig_bdd_149;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_157;
reg    ap_sig_ioackin_out_r_ap_ack;
reg    ap_reg_ioackin_out_r_ap_ack = 1'b0;
wire   [2:0] tmp_7_fu_140_p4;
wire  signed [31:0] grp_fu_196_p0;
wire  signed [31:0] grp_fu_196_p1;
wire  signed [31:0] grp_fu_202_p0;
wire  signed [31:0] grp_fu_202_p1;
wire  signed [31:0] grp_fu_208_p0;
wire  signed [31:0] grp_fu_208_p1;
wire  signed [31:0] grp_fu_214_p0;
wire  signed [31:0] grp_fu_214_p1;
wire  signed [62:0] p_Val2_s_fu_220_p2;
wire  signed [62:0] p_Val2_1_fu_234_p2;
wire    grp_fu_196_ce;
wire    grp_fu_202_ce;
wire    grp_fu_208_ce;
wire    grp_fu_214_ce;
reg   [11:0] ap_NS_fsm;
reg    ap_sig_bdd_170;


filter_top_mul_32s_32s_63_7 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32s_32s_63_7_U10(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_196_p0 ),
    .din1( grp_fu_196_p1 ),
    .ce( grp_fu_196_ce ),
    .dout( grp_fu_196_p2 )
);

filter_top_mul_32s_32s_63_7 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32s_32s_63_7_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_202_p0 ),
    .din1( grp_fu_202_p1 ),
    .ce( grp_fu_202_ce ),
    .dout( grp_fu_202_p2 )
);

filter_top_mul_32s_32s_63_7 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32s_32s_63_7_U12(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_208_p0 ),
    .din1( grp_fu_208_p1 ),
    .ce( grp_fu_208_ce ),
    .dout( grp_fu_208_p2 )
);

filter_top_mul_32s_32s_63_7 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
filter_top_mul_32s_32s_63_7_U13(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_214_p0 ),
    .din1( grp_fu_214_p1 ),
    .ce( grp_fu_214_ce ),
    .dout( grp_fu_214_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_123_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_out_r_ap_ack assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_out_r_ap_ack
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_out_r_ap_ack <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_170) begin
            if (~((ap_const_lv1_0 == icmp_reg_273) & (ap_const_logic_0 == ap_sig_ioackin_out_r_ap_ack))) begin
                ap_reg_ioackin_out_r_ap_ack <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == out_r_ap_ack)) begin
                ap_reg_ioackin_out_r_ap_ack <= ap_const_logic_1;
            end
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & ~((ap_const_lv1_0 == icmp_reg_273) & (ap_const_logic_0 == ap_sig_ioackin_out_r_ap_ack)))) begin
        i_reg_111 <= i_1_reg_258;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_149)) begin
        i_reg_111 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_258 <= i_1_fu_129_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_123_p2 == ap_const_lv1_0))) begin
        icmp_reg_273 <= icmp_fu_150_p2;
        tmp_reg_263[0] <= tmp_fu_135_p1[0];
tmp_reg_263[1] <= tmp_fu_135_p1[1];
tmp_reg_263[2] <= tmp_fu_135_p1[2];
tmp_reg_263[3] <= tmp_fu_135_p1[3];
tmp_reg_263[4] <= tmp_fu_135_p1[4];
tmp_reg_263[5] <= tmp_fu_135_p1[5];
tmp_reg_263[6] <= tmp_fu_135_p1[6];
tmp_reg_263[7] <= tmp_fu_135_p1[7];
tmp_reg_263[8] <= tmp_fu_135_p1[8];
tmp_reg_263[9] <= tmp_fu_135_p1[9];
tmp_reg_263[10] <= tmp_fu_135_p1[10];
tmp_reg_263[11] <= tmp_fu_135_p1[11];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_91)) begin
        input_xk2_read_reg_297 <= input_xk2_dout;
        p_x_M_imag_V_read_assign_reg_292 <= {{input_xk1_dout[ap_const_lv32_3F : ap_const_lv32_20]}};
        p_y_M_imag_V_read_assign_reg_282 <= {{coefs_q0[ap_const_lv32_3F : ap_const_lv32_20]}};
        tmp_5_reg_277 <= tmp_5_fu_156_p1;
        tmp_6_reg_287 <= tmp_6_fu_170_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        p_r_M_imag_V_reg_351 <= {{p_Val2_1_fu_234_p2[ap_const_lv32_3E : ap_const_lv32_1F]}};
        p_r_M_real_V_reg_346 <= {{p_Val2_s_fu_220_p2[ap_const_lv32_3E : ap_const_lv32_1F]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp1_i_cast_reg_326 <= grp_fu_196_p2;
        tmp_2_i_cast_reg_331 <= grp_fu_202_p2;
        tmp_3_i_cast_reg_341 <= grp_fu_214_p2;
        tmp_i_cast_reg_336 <= grp_fu_208_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_123_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_123_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_123_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_123_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_124)
begin
    if (ap_sig_bdd_124) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_139)
begin
    if (ap_sig_bdd_139) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_157)
begin
    if (ap_sig_bdd_157) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_31)
begin
    if (ap_sig_bdd_31) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_67)
begin
    if (ap_sig_bdd_67) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_86)
begin
    if (ap_sig_bdd_86) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_109)
begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_out_r_ap_ack assign process. ///
always @ (out_r_ap_ack or ap_reg_ioackin_out_r_ap_ack)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_out_r_ap_ack)) begin
        ap_sig_ioackin_out_r_ap_ack = out_r_ap_ack;
    end else begin
        ap_sig_ioackin_out_r_ap_ack = ap_const_logic_1;
    end
end

/// coefs_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        coefs_ce0 = ap_const_logic_1;
    end else begin
        coefs_ce0 = ap_const_logic_0;
    end
end

/// input_xk1_read assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_91)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_91)) begin
        input_xk1_read = ap_const_logic_1;
    end else begin
        input_xk1_read = ap_const_logic_0;
    end
end

/// input_xk2_read assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_91)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_91)) begin
        input_xk2_read = ap_const_logic_1;
    end else begin
        input_xk2_read = ap_const_logic_0;
    end
end

/// out_r_ap_vld assign process. ///
always @ (icmp_reg_273 or ap_sig_cseq_ST_st12_fsm_11 or ap_reg_ioackin_out_r_ap_ack)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & (ap_const_lv1_0 == icmp_reg_273) & (ap_const_logic_0 == ap_reg_ioackin_out_r_ap_ack))) begin
        out_r_ap_vld = ap_const_logic_1;
    end else begin
        out_r_ap_vld = ap_const_logic_0;
    end
end

/// output_xk1_ce0 assign process. ///
always @ (icmp_reg_273 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_ioackin_out_r_ap_ack)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & ~((ap_const_lv1_0 == icmp_reg_273) & (ap_const_logic_0 == ap_sig_ioackin_out_r_ap_ack)))) begin
        output_xk1_ce0 = ap_const_logic_1;
    end else begin
        output_xk1_ce0 = ap_const_logic_0;
    end
end

/// output_xk1_we0 assign process. ///
always @ (icmp_reg_273 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_ioackin_out_r_ap_ack)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & ~((ap_const_lv1_0 == icmp_reg_273) & (ap_const_logic_0 == ap_sig_ioackin_out_r_ap_ack)))) begin
        output_xk1_we0 = ap_const_logic_1;
    end else begin
        output_xk1_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond_fu_123_p2 or icmp_reg_273 or ap_sig_bdd_91 or ap_sig_bdd_149 or ap_sig_ioackin_out_r_ap_ack)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_149) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_fu_123_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~ap_sig_bdd_91) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            if (~((ap_const_lv1_0 == icmp_reg_273) & (ap_const_logic_0 == ap_sig_ioackin_out_r_ap_ack))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_109 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_124 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_124 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_139 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_139 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_149 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_149 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_157 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_157 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_170 assign process. ///
always @ (icmp_reg_273 or ap_sig_cseq_ST_st12_fsm_11)
begin
    ap_sig_bdd_170 = ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & (ap_const_lv1_0 == icmp_reg_273));
end

/// ap_sig_bdd_31 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_31 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_67 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_67 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_86 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_86 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_91 assign process. ///
always @ (input_xk1_empty_n or input_xk2_empty_n)
begin
    ap_sig_bdd_91 = ((input_xk1_empty_n == ap_const_logic_0) | (input_xk2_empty_n == ap_const_logic_0));
end
assign coefs_address0 = tmp_fu_135_p1;
assign exitcond_fu_123_p2 = (i_reg_111 == ap_const_lv12_800? 1'b1: 1'b0);
assign grp_fu_196_ce = ap_const_logic_1;
assign grp_fu_196_p0 = tmp_1_fu_184_p1;
assign grp_fu_196_p1 = tmp_2_fu_187_p1;
assign grp_fu_202_ce = ap_const_logic_1;
assign grp_fu_202_p0 = tmp_3_fu_190_p1;
assign grp_fu_202_p1 = tmp_4_fu_193_p1;
assign grp_fu_208_ce = ap_const_logic_1;
assign grp_fu_208_p0 = tmp_3_fu_190_p1;
assign grp_fu_208_p1 = tmp_2_fu_187_p1;
assign grp_fu_214_ce = ap_const_logic_1;
assign grp_fu_214_p0 = tmp_1_fu_184_p1;
assign grp_fu_214_p1 = tmp_4_fu_193_p1;
assign i_1_fu_129_p2 = (i_reg_111 + ap_const_lv12_1);
assign icmp_fu_150_p2 = (tmp_7_fu_140_p4 == ap_const_lv3_0? 1'b1: 1'b0);
assign out_r = input_xk2_read_reg_297;
assign output_xk1_address0 = tmp_reg_263;
assign output_xk1_d0 = {{p_r_M_imag_V_reg_351}, {p_r_M_real_V_reg_346}};
assign p_Val2_1_fu_234_p2 = ($signed(tmp_i_cast_reg_336) + $signed(tmp_3_i_cast_reg_341));
assign p_Val2_s_fu_220_p2 = ($signed(tmp1_i_cast_reg_326) - $signed(tmp_2_i_cast_reg_331));
assign tmp_1_fu_184_p1 = $signed(tmp_5_reg_277);
assign tmp_2_fu_187_p1 = $signed(tmp_6_reg_287);
assign tmp_3_fu_190_p1 = $signed(p_y_M_imag_V_read_assign_reg_282);
assign tmp_4_fu_193_p1 = $signed(p_x_M_imag_V_read_assign_reg_292);
assign tmp_5_fu_156_p1 = coefs_q0[31:0];
assign tmp_6_fu_170_p1 = input_xk1_dout[31:0];
assign tmp_7_fu_140_p4 = {{i_reg_111[ap_const_lv32_B : ap_const_lv32_9]}};
assign tmp_fu_135_p1 = i_reg_111;
always @ (posedge ap_clk)
begin
    tmp_reg_263[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end



endmodule //filter_top_dummy_proc_be

