-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sosf_detector_top_dummy_proc_fe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    config_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_data_V_full_n : IN STD_LOGIC;
    config_data_V_write : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    xn_arg_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    xn_arg_full_n : IN STD_LOGIC;
    xn_arg_write : OUT STD_LOGIC );
end;


architecture behav of sosf_detector_top_dummy_proc_fe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_500 : STD_LOGIC_VECTOR (13 downto 0) := "00010100000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv14_1AFF : STD_LOGIC_VECTOR (13 downto 0) := "01101011111111";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_24 : BOOLEAN;
    signal detector_tail_M_real_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal detector_tail_M_real_ce0 : STD_LOGIC;
    signal detector_tail_M_real_we0 : STD_LOGIC;
    signal detector_tail_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal detector_tail_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal detector_tail_M_imag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal detector_tail_M_imag_ce0 : STD_LOGIC;
    signal detector_tail_M_imag_we0 : STD_LOGIC;
    signal detector_tail_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal detector_tail_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_152_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_reg_231 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal exitcond_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_82 : BOOLEAN;
    signal tmp_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_M_imag_load_new_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_188_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_reg_254 : STD_LOGIC_VECTOR (10 downto 0);
    signal detector_tail_M_real_load_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal detector_tail_M_imag_load_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_123 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_bdd_124 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal tmp_1_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal out_M_imag_addr222829_part_se_fu_219_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_184_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tail_M_imag_load_toint_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tail_M_real_load_toint_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component sosf_detector_top_dummy_proc_fe_detector_tail_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    detector_tail_M_real_U : component sosf_detector_top_dummy_proc_fe_detector_tail_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => detector_tail_M_real_address0,
        ce0 => detector_tail_M_real_ce0,
        we0 => detector_tail_M_real_we0,
        d0 => detector_tail_M_real_d0,
        q0 => detector_tail_M_real_q0);

    detector_tail_M_imag_U : component sosf_detector_top_dummy_proc_fe_detector_tail_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => detector_tail_M_imag_address0,
        ce0 => detector_tail_M_imag_ce0,
        we0 => detector_tail_M_imag_we0,
        d0 => detector_tail_M_imag_d0,
        q0 => detector_tail_M_imag_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_82) and not((exitcond_fu_146_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_123 assign process. --
    i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(ap_sig_bdd_137))) then 
                i_reg_123 <= i_1_reg_231;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_124))) then 
                i_reg_123 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                detector_tail_M_imag_load_reg_274 <= detector_tail_M_imag_q0;
                detector_tail_M_real_load_reg_269 <= detector_tail_M_real_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_82))) then
                i_1_reg_231 <= i_1_fu_152_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2) and not(ap_sig_bdd_82))) then
                in_M_imag_load_new_reg_245 <= in_r_dout(63 downto 32);
                tmp_4_reg_240 <= tmp_4_fu_164_p1;
                tmp_5_reg_250 <= tmp_5_fu_178_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2) and not(ap_sig_bdd_82) and not((ap_const_lv1_0 = tmp_5_fu_178_p2)))) then
                tmp_6_reg_254 <= tmp_6_fu_188_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_146_p2 = ap_const_lv1_0) and not(ap_sig_bdd_82))) then
                tmp_reg_236 <= tmp_fu_158_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_fu_146_p2, tmp_fu_158_p2, ap_sig_bdd_82, ap_sig_bdd_124, ap_sig_bdd_137)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_124)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(ap_sig_bdd_82) and not((exitcond_fu_146_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2) and not(ap_sig_bdd_82))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif (((exitcond_fu_146_p2 = ap_const_lv1_0) and not(ap_sig_bdd_82) and not((ap_const_lv1_0 = tmp_fu_158_p2)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not(ap_sig_bdd_137)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_146_p2, ap_sig_bdd_82)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_82) and not((exitcond_fu_146_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_146_p2, ap_sig_bdd_82)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_82) and not((exitcond_fu_146_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_start, ap_done_reg, config_data_V_full_n)
    begin
                ap_sig_bdd_124 <= ((config_data_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(xn_arg_full_n, tmp_reg_236)
    begin
                ap_sig_bdd_137 <= ((xn_arg_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_236)));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_82 assign process. --
    ap_sig_bdd_82_assign_proc : process(in_r_empty_n, xn_arg_full_n, exitcond_fu_146_p2, tmp_fu_158_p2)
    begin
                ap_sig_bdd_82 <= (((in_r_empty_n = ap_const_logic_0) and (exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2)) or ((exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2) and (xn_arg_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_24)
    begin
        if (ap_sig_bdd_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

        config_data_V_din(16-1 downto 1) <= ap_const_lv16_0(16-1 downto 1);
    config_data_V_din(0) <= ap_const_lv1_1(0);


    -- config_data_V_write assign process. --
    config_data_V_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_124)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_124))) then 
            config_data_V_write <= ap_const_logic_1;
        else 
            config_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- detector_tail_M_imag_address0 assign process. --
    detector_tail_M_imag_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_194_p1, tmp_7_fu_200_p1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            detector_tail_M_imag_address0 <= tmp_7_fu_200_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            detector_tail_M_imag_address0 <= tmp_1_fu_194_p1(11 - 1 downto 0);
        else 
            detector_tail_M_imag_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- detector_tail_M_imag_ce0 assign process. --
    detector_tail_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_82, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_82)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            detector_tail_M_imag_ce0 <= ap_const_logic_1;
        else 
            detector_tail_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    detector_tail_M_imag_d0 <= in_M_imag_load_new_reg_245;

    -- detector_tail_M_imag_we0 assign process. --
    detector_tail_M_imag_we0_assign_proc : process(tmp_5_reg_250, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_5_reg_250))))) then 
            detector_tail_M_imag_we0 <= ap_const_logic_1;
        else 
            detector_tail_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- detector_tail_M_real_address0 assign process. --
    detector_tail_M_real_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_194_p1, tmp_7_fu_200_p1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            detector_tail_M_real_address0 <= tmp_7_fu_200_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            detector_tail_M_real_address0 <= tmp_1_fu_194_p1(11 - 1 downto 0);
        else 
            detector_tail_M_real_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- detector_tail_M_real_ce0 assign process. --
    detector_tail_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_82, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_82)) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            detector_tail_M_real_ce0 <= ap_const_logic_1;
        else 
            detector_tail_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    detector_tail_M_real_d0 <= tmp_4_reg_240;

    -- detector_tail_M_real_we0 assign process. --
    detector_tail_M_real_we0_assign_proc : process(tmp_5_reg_250, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_5_reg_250))))) then 
            detector_tail_M_real_we0 <= ap_const_logic_1;
        else 
            detector_tail_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_146_p2 <= "1" when (i_reg_123 = ap_const_lv14_2000) else "0";
    i_1_fu_152_p2 <= std_logic_vector(unsigned(i_reg_123) + unsigned(ap_const_lv14_1));

    -- in_r_read assign process. --
    in_r_read_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_146_p2, tmp_fu_158_p2, ap_sig_bdd_82)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2) and not(ap_sig_bdd_82))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;

    out_M_imag_addr222829_part_se_fu_219_p3 <= (tail_M_imag_load_toint_fu_216_p1 & tail_M_real_load_toint_fu_213_p1);
    tail_M_imag_load_toint_fu_216_p1 <= detector_tail_M_imag_load_reg_274;
    tail_M_real_load_toint_fu_213_p1 <= detector_tail_M_real_load_reg_269;
    tmp_1_fu_194_p1 <= std_logic_vector(resize(unsigned(i_reg_123),64));
    tmp_4_fu_164_p1 <= in_r_dout(32 - 1 downto 0);
    tmp_5_fu_178_p2 <= "1" when (unsigned(i_reg_123) > unsigned(ap_const_lv14_1AFF)) else "0";
    tmp_6_fu_188_p2 <= std_logic_vector(unsigned(tmp_8_fu_184_p1) + unsigned(ap_const_lv11_500));
    tmp_7_fu_200_p1 <= std_logic_vector(resize(unsigned(tmp_6_reg_254),64));
    tmp_8_fu_184_p1 <= i_reg_123(11 - 1 downto 0);
    tmp_fu_158_p2 <= "1" when (unsigned(i_reg_123) < unsigned(ap_const_lv14_500)) else "0";

    -- xn_arg_din assign process. --
    xn_arg_din_assign_proc : process(in_r_dout, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_146_p2, tmp_fu_158_p2, ap_sig_bdd_82, tmp_reg_236, ap_sig_cseq_ST_st5_fsm_4, ap_sig_bdd_137, out_M_imag_addr222829_part_se_fu_219_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_reg_236)) and not(ap_sig_bdd_137))) then 
            xn_arg_din <= out_M_imag_addr222829_part_se_fu_219_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2) and not(ap_sig_bdd_82))) then 
            xn_arg_din <= in_r_dout;
        else 
            xn_arg_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- xn_arg_write assign process. --
    xn_arg_write_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_146_p2, tmp_fu_158_p2, ap_sig_bdd_82, tmp_reg_236, ap_sig_cseq_ST_st5_fsm_4, ap_sig_bdd_137)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_146_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_fu_158_p2) and not(ap_sig_bdd_82)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_reg_236)) and not(ap_sig_bdd_137)))) then 
            xn_arg_write <= ap_const_logic_1;
        else 
            xn_arg_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
