-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sosf_detector_top_dummy_proc_be is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    status_in_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    status_in_data_V_empty_n : IN STD_LOGIC;
    status_in_data_V_read : OUT STD_LOGIC;
    ovflo_din : OUT STD_LOGIC;
    ovflo_full_n : IN STD_LOGIC;
    ovflo_write : OUT STD_LOGIC;
    coefs_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    coefs_ce0 : OUT STD_LOGIC;
    coefs_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    xk_arg_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    xk_arg_empty_n : IN STD_LOGIC;
    xk_arg_read : OUT STD_LOGIC );
end;


architecture behav of sosf_detector_top_dummy_proc_be is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_39 : BOOLEAN;
    signal i_1_fu_141_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_reg_223 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_76 : BOOLEAN;
    signal exitcond_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_87 : BOOLEAN;
    signal tmp_s_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_228 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal in_M_imag_addr1018_new_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal coefs_M_imag_addr420_new6_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_M_real_read_assign_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal p_x_M_imag_read_assign_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_real_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_imag_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_23_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal grp_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_99 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_bdd_160 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal grp_fu_111_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal grp_fu_115_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_0_toint_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_0_toint_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_ce : STD_LOGIC;
    signal grp_fu_115_ce : STD_LOGIC;
    signal grp_fu_119_ce : STD_LOGIC;
    signal grp_fu_123_ce : STD_LOGIC;
    signal grp_fu_127_ce : STD_LOGIC;
    signal grp_fu_131_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component sosf_detector_top_fsub_32ns_32ns_32_10_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sosf_detector_top_fadd_32ns_32ns_32_10_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sosf_detector_top_fsub_32ns_32ns_32_10_full_dsp_U6 : component sosf_detector_top_fsub_32ns_32ns_32_10_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_111_p0,
        din1 => grp_fu_111_p1,
        ce => grp_fu_111_ce,
        dout => grp_fu_111_p2);

    sosf_detector_top_fadd_32ns_32ns_32_10_full_dsp_U7 : component sosf_detector_top_fadd_32ns_32ns_32_10_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_115_p0,
        din1 => grp_fu_115_p1,
        ce => grp_fu_115_ce,
        dout => grp_fu_115_p2);

    sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U8 : component sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_119_p0,
        din1 => grp_fu_119_p1,
        ce => grp_fu_119_ce,
        dout => grp_fu_119_p2);

    sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U9 : component sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_123_p0,
        din1 => grp_fu_123_p1,
        ce => grp_fu_123_ce,
        dout => grp_fu_123_p2);

    sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U10 : component sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_127_p0,
        din1 => grp_fu_127_p1,
        ce => grp_fu_127_ce,
        dout => grp_fu_127_p2);

    sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U11 : component sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_131_p0,
        din1 => grp_fu_131_p1,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_87))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_99 assign process. --
    i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                i_reg_99 <= i_1_reg_223;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_160))) then 
                i_reg_99 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((xk_arg_empty_n = ap_const_logic_0)))) then
                coefs_M_imag_addr420_new6_reg_253 <= coefs_q0(63 downto 32);
                in_M_imag_addr1018_new_reg_243 <= xk_arg_dout(63 downto 32);
                tmp_1_reg_238 <= tmp_1_fu_157_p1;
                tmp_2_reg_248 <= tmp_2_fu_171_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_87))) then
                i_1_reg_223 <= i_1_fu_141_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                p_r_M_imag_reg_307 <= grp_fu_115_p2;
                p_r_M_real_reg_302 <= grp_fu_111_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_2_i_reg_292 <= grp_fu_127_p2;
                tmp_3_i_reg_297 <= grp_fu_131_p2;
                tmp_i_23_reg_287 <= grp_fu_123_p2;
                tmp_i_reg_282 <= grp_fu_119_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_135_p2 = ap_const_lv1_0) and not(ap_sig_bdd_87))) then
                tmp_s_reg_228(0) <= tmp_s_fu_147_p1(0);
    tmp_s_reg_228(1) <= tmp_s_fu_147_p1(1);
    tmp_s_reg_228(2) <= tmp_s_fu_147_p1(2);
    tmp_s_reg_228(3) <= tmp_s_fu_147_p1(3);
    tmp_s_reg_228(4) <= tmp_s_fu_147_p1(4);
    tmp_s_reg_228(5) <= tmp_s_fu_147_p1(5);
    tmp_s_reg_228(6) <= tmp_s_fu_147_p1(6);
    tmp_s_reg_228(7) <= tmp_s_fu_147_p1(7);
    tmp_s_reg_228(8) <= tmp_s_fu_147_p1(8);
    tmp_s_reg_228(9) <= tmp_s_fu_147_p1(9);
    tmp_s_reg_228(10) <= tmp_s_fu_147_p1(10);
    tmp_s_reg_228(11) <= tmp_s_fu_147_p1(11);
    tmp_s_reg_228(12) <= tmp_s_fu_147_p1(12);
    tmp_s_reg_228(13) <= tmp_s_fu_147_p1(13);
            end if;
        end if;
    end process;
    tmp_s_reg_228(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, xk_arg_empty_n, exitcond_fu_135_p2, ap_sig_bdd_87, ap_sig_bdd_160)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_160)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_87))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_135_p2 = ap_const_lv1_0) and not(ap_sig_bdd_87))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((xk_arg_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_135_p2, ap_sig_bdd_87)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_87)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_135_p2, ap_sig_bdd_87)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_87))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_160 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_39 assign process. --
    ap_sig_bdd_39_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_39 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_76 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(status_in_data_V_empty_n, ovflo_full_n, exitcond_fu_135_p2)
    begin
                ap_sig_bdd_87 <= (((status_in_data_V_empty_n = ap_const_logic_0) and not((exitcond_fu_135_p2 = ap_const_lv1_0))) or (not((exitcond_fu_135_p2 = ap_const_lv1_0)) and (ovflo_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_39)
    begin
        if (ap_sig_bdd_39) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_76)
    begin
        if (ap_sig_bdd_76) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    coefs_address0 <= tmp_s_fu_147_p1(13 - 1 downto 0);

    -- coefs_ce0 assign process. --
    coefs_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_87)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_87))) then 
            coefs_ce0 <= ap_const_logic_1;
        else 
            coefs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_135_p2 <= "1" when (i_reg_99 = ap_const_lv14_2000) else "0";
    grp_fu_111_ce <= ap_const_logic_1;
    grp_fu_111_p0 <= tmp_i_reg_282;
    grp_fu_111_p1 <= tmp_i_23_reg_287;
    grp_fu_115_ce <= ap_const_logic_1;
    grp_fu_115_p0 <= tmp_2_i_reg_292;
    grp_fu_115_p1 <= tmp_3_i_reg_297;
    grp_fu_119_ce <= ap_const_logic_1;
    grp_fu_119_p0 <= p_x_M_real_read_assign_fu_185_p1;
    grp_fu_119_p1 <= p_t_real_fu_195_p1;
    grp_fu_123_ce <= ap_const_logic_1;
    grp_fu_123_p0 <= p_x_M_imag_read_assign_fu_190_p1;
    grp_fu_123_p1 <= p_t_imag_fu_200_p1;
    grp_fu_127_ce <= ap_const_logic_1;
    grp_fu_127_p0 <= p_x_M_imag_read_assign_fu_190_p1;
    grp_fu_127_p1 <= p_t_real_fu_195_p1;
    grp_fu_131_ce <= ap_const_logic_1;
    grp_fu_131_p0 <= p_x_M_real_read_assign_fu_185_p1;
    grp_fu_131_p1 <= p_t_imag_fu_200_p1;
    i_1_fu_141_p2 <= std_logic_vector(unsigned(i_reg_99) + unsigned(ap_const_lv14_1));
    out_r_address0 <= tmp_s_reg_228(13 - 1 downto 0);

    -- out_r_ce0 assign process. --
    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= (p_1_0_toint_fu_208_p1 & p_0_0_toint_fu_205_p1);

    -- out_r_we0 assign process. --
    out_r_we0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ovflo_din <= status_in_data_V_dout(1 - 1 downto 0)(0);

    -- ovflo_write assign process. --
    ovflo_write_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_135_p2, ap_sig_bdd_87)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_87))) then 
            ovflo_write <= ap_const_logic_1;
        else 
            ovflo_write <= ap_const_logic_0;
        end if; 
    end process;

    p_0_0_toint_fu_205_p1 <= p_r_M_real_reg_302;
    p_1_0_toint_fu_208_p1 <= p_r_M_imag_reg_307;
    p_t_imag_fu_200_p1 <= coefs_M_imag_addr420_new6_reg_253;
    p_t_real_fu_195_p1 <= tmp_2_reg_248;
    p_x_M_imag_read_assign_fu_190_p1 <= in_M_imag_addr1018_new_reg_243;
    p_x_M_real_read_assign_fu_185_p1 <= tmp_1_reg_238;

    -- status_in_data_V_read assign process. --
    status_in_data_V_read_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_135_p2, ap_sig_bdd_87)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_135_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_87))) then 
            status_in_data_V_read <= ap_const_logic_1;
        else 
            status_in_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_157_p1 <= xk_arg_dout(32 - 1 downto 0);
    tmp_2_fu_171_p1 <= coefs_q0(32 - 1 downto 0);
    tmp_s_fu_147_p1 <= std_logic_vector(resize(unsigned(i_reg_99),64));

    -- xk_arg_read assign process. --
    xk_arg_read_assign_proc : process(xk_arg_empty_n, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((xk_arg_empty_n = ap_const_logic_0)))) then 
            xk_arg_read <= ap_const_logic_1;
        else 
            xk_arg_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
