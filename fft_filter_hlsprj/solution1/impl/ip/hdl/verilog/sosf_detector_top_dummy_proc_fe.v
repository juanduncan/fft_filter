// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sosf_detector_top_dummy_proc_fe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        config_data_V_din,
        config_data_V_full_n,
        config_data_V_write,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        xn_arg_din,
        xn_arg_full_n,
        xn_arg_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv14_2000 = 14'b10000000000000;
parameter    ap_const_lv14_1 = 14'b1;
parameter    ap_const_lv14_500 = 14'b10100000000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv14_1AFF = 14'b1101011111111;
parameter    ap_const_lv11_500 = 11'b10100000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] config_data_V_din;
input   config_data_V_full_n;
output   config_data_V_write;
input  [63:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [63:0] xn_arg_din;
input   xn_arg_full_n;
output   xn_arg_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] config_data_V_din;
reg config_data_V_write;
reg in_r_read;
reg[63:0] xn_arg_din;
reg xn_arg_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_24;
reg   [10:0] detector_tail_M_real_address0;
reg    detector_tail_M_real_ce0;
reg    detector_tail_M_real_we0;
wire   [31:0] detector_tail_M_real_d0;
wire   [31:0] detector_tail_M_real_q0;
reg   [10:0] detector_tail_M_imag_address0;
reg    detector_tail_M_imag_ce0;
reg    detector_tail_M_imag_we0;
wire   [31:0] detector_tail_M_imag_d0;
wire   [31:0] detector_tail_M_imag_q0;
wire   [13:0] i_1_fu_152_p2;
reg   [13:0] i_1_reg_231;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_69;
wire   [0:0] exitcond_fu_146_p2;
wire   [0:0] tmp_fu_158_p2;
reg    ap_sig_bdd_82;
reg   [0:0] tmp_reg_236;
wire   [31:0] tmp_4_fu_164_p1;
reg   [31:0] tmp_4_reg_240;
reg   [31:0] in_M_imag_load_new_reg_245;
wire   [0:0] tmp_5_fu_178_p2;
reg   [0:0] tmp_5_reg_250;
wire   [10:0] tmp_6_fu_188_p2;
reg   [10:0] tmp_6_reg_254;
reg   [31:0] detector_tail_M_real_load_reg_269;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_113;
reg   [31:0] detector_tail_M_imag_load_reg_274;
reg   [13:0] i_reg_123;
reg    ap_sig_bdd_124;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_132;
reg    ap_sig_bdd_137;
wire   [63:0] tmp_1_fu_194_p1;
wire   [63:0] tmp_7_fu_200_p1;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_149;
wire   [63:0] out_M_imag_addr222829_part_se_fu_219_p3;
wire   [10:0] tmp_8_fu_184_p1;
wire   [31:0] tail_M_imag_load_toint_fu_216_p1;
wire   [31:0] tail_M_real_load_toint_fu_213_p1;
reg   [4:0] ap_NS_fsm;


sosf_detector_top_dummy_proc_fe_detector_tail_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
detector_tail_M_real_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( detector_tail_M_real_address0 ),
    .ce0( detector_tail_M_real_ce0 ),
    .we0( detector_tail_M_real_we0 ),
    .d0( detector_tail_M_real_d0 ),
    .q0( detector_tail_M_real_q0 )
);

sosf_detector_top_dummy_proc_fe_detector_tail_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
detector_tail_M_imag_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( detector_tail_M_imag_address0 ),
    .ce0( detector_tail_M_imag_ce0 ),
    .we0( detector_tail_M_imag_we0 ),
    .d0( detector_tail_M_imag_d0 ),
    .q0( detector_tail_M_imag_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_82 & ~(exitcond_fu_146_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~ap_sig_bdd_137)) begin
        i_reg_123 <= i_1_reg_231;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_124)) begin
        i_reg_123 <= ap_const_lv14_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        detector_tail_M_imag_load_reg_274 <= detector_tail_M_imag_q0;
        detector_tail_M_real_load_reg_269 <= detector_tail_M_real_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_82)) begin
        i_1_reg_231 <= i_1_fu_152_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2) & ~ap_sig_bdd_82)) begin
        in_M_imag_load_new_reg_245 <= {{in_r_dout[ap_const_lv32_3F : ap_const_lv32_20]}};
        tmp_4_reg_240 <= tmp_4_fu_164_p1;
        tmp_5_reg_250 <= tmp_5_fu_178_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2) & ~ap_sig_bdd_82 & ~(ap_const_lv1_0 == tmp_5_fu_178_p2))) begin
        tmp_6_reg_254 <= tmp_6_fu_188_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_146_p2 == ap_const_lv1_0) & ~ap_sig_bdd_82)) begin
        tmp_reg_236 <= tmp_fu_158_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_146_p2 or ap_sig_bdd_82)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_82 & ~(exitcond_fu_146_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_146_p2 or ap_sig_bdd_82)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_82 & ~(exitcond_fu_146_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_24)
begin
    if (ap_sig_bdd_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_69)
begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_149)
begin
    if (ap_sig_bdd_149) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_113)
begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_132)
begin
    if (ap_sig_bdd_132) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// config_data_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_124)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_124)) begin
        config_data_V_write = ap_const_logic_1;
    end else begin
        config_data_V_write = ap_const_logic_0;
    end
end

/// detector_tail_M_imag_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_1_fu_194_p1 or tmp_7_fu_200_p1 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        detector_tail_M_imag_address0 = tmp_7_fu_200_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        detector_tail_M_imag_address0 = tmp_1_fu_194_p1;
    end else begin
        detector_tail_M_imag_address0 = 'bx;
    end
end

/// detector_tail_M_imag_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_82 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_82) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        detector_tail_M_imag_ce0 = ap_const_logic_1;
    end else begin
        detector_tail_M_imag_ce0 = ap_const_logic_0;
    end
end

/// detector_tail_M_imag_we0 assign process. ///
always @ (tmp_5_reg_250 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_5_reg_250))) begin
        detector_tail_M_imag_we0 = ap_const_logic_1;
    end else begin
        detector_tail_M_imag_we0 = ap_const_logic_0;
    end
end

/// detector_tail_M_real_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_1_fu_194_p1 or tmp_7_fu_200_p1 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        detector_tail_M_real_address0 = tmp_7_fu_200_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        detector_tail_M_real_address0 = tmp_1_fu_194_p1;
    end else begin
        detector_tail_M_real_address0 = 'bx;
    end
end

/// detector_tail_M_real_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_82 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_82) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        detector_tail_M_real_ce0 = ap_const_logic_1;
    end else begin
        detector_tail_M_real_ce0 = ap_const_logic_0;
    end
end

/// detector_tail_M_real_we0 assign process. ///
always @ (tmp_5_reg_250 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_5_reg_250))) begin
        detector_tail_M_real_we0 = ap_const_logic_1;
    end else begin
        detector_tail_M_real_we0 = ap_const_logic_0;
    end
end

/// in_r_read assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_146_p2 or tmp_fu_158_p2 or ap_sig_bdd_82)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2) & ~ap_sig_bdd_82)) begin
        in_r_read = ap_const_logic_1;
    end else begin
        in_r_read = ap_const_logic_0;
    end
end

/// xn_arg_din assign process. ///
always @ (in_r_dout or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_146_p2 or tmp_fu_158_p2 or ap_sig_bdd_82 or tmp_reg_236 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_bdd_137 or out_M_imag_addr222829_part_se_fu_219_p3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == tmp_reg_236) & ~ap_sig_bdd_137)) begin
        xn_arg_din = out_M_imag_addr222829_part_se_fu_219_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2) & ~ap_sig_bdd_82)) begin
        xn_arg_din = in_r_dout;
    end else begin
        xn_arg_din = 'bx;
    end
end

/// xn_arg_write assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_146_p2 or tmp_fu_158_p2 or ap_sig_bdd_82 or tmp_reg_236 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_bdd_137)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2) & ~ap_sig_bdd_82) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == tmp_reg_236) & ~ap_sig_bdd_137))) begin
        xn_arg_write = ap_const_logic_1;
    end else begin
        xn_arg_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond_fu_146_p2 or tmp_fu_158_p2 or ap_sig_bdd_82 or ap_sig_bdd_124 or ap_sig_bdd_137)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_124) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~ap_sig_bdd_82 & ~(exitcond_fu_146_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2) & ~ap_sig_bdd_82)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if (((exitcond_fu_146_p2 == ap_const_lv1_0) & ~ap_sig_bdd_82 & ~(ap_const_lv1_0 == tmp_fu_158_p2))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~ap_sig_bdd_137) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_113 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_124 assign process. ///
always @ (ap_start or ap_done_reg or config_data_V_full_n)
begin
    ap_sig_bdd_124 = ((config_data_V_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_132 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_132 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_137 assign process. ///
always @ (xn_arg_full_n or tmp_reg_236)
begin
    ap_sig_bdd_137 = ((xn_arg_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_reg_236));
end

/// ap_sig_bdd_149 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_149 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_24 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_24 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_69 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_69 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_82 assign process. ///
always @ (in_r_empty_n or xn_arg_full_n or exitcond_fu_146_p2 or tmp_fu_158_p2)
begin
    ap_sig_bdd_82 = (((in_r_empty_n == ap_const_logic_0) & (exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2)) | ((exitcond_fu_146_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_fu_158_p2) & (xn_arg_full_n == ap_const_logic_0)));
end
assign config_data_V_din[16-1:1] = ap_const_lv16_0[16-1:1];
assign config_data_V_din[0] = ap_const_lv1_1[0];

assign detector_tail_M_imag_d0 = in_M_imag_load_new_reg_245;
assign detector_tail_M_real_d0 = tmp_4_reg_240;
assign exitcond_fu_146_p2 = (i_reg_123 == ap_const_lv14_2000? 1'b1: 1'b0);
assign i_1_fu_152_p2 = (i_reg_123 + ap_const_lv14_1);
assign out_M_imag_addr222829_part_se_fu_219_p3 = {{tail_M_imag_load_toint_fu_216_p1}, {tail_M_real_load_toint_fu_213_p1}};
assign tail_M_imag_load_toint_fu_216_p1 = detector_tail_M_imag_load_reg_274;
assign tail_M_real_load_toint_fu_213_p1 = detector_tail_M_real_load_reg_269;
assign tmp_1_fu_194_p1 = i_reg_123;
assign tmp_4_fu_164_p1 = in_r_dout[31:0];
assign tmp_5_fu_178_p2 = (i_reg_123 > ap_const_lv14_1AFF? 1'b1: 1'b0);
assign tmp_6_fu_188_p2 = ($signed(tmp_8_fu_184_p1) + $signed(ap_const_lv11_500));
assign tmp_7_fu_200_p1 = tmp_6_reg_254;
assign tmp_8_fu_184_p1 = i_reg_123[10:0];
assign tmp_fu_158_p2 = (i_reg_123 < ap_const_lv14_500? 1'b1: 1'b0);


endmodule //sosf_detector_top_dummy_proc_fe

