// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sosf_detector_top_dummy_proc_be (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        status_in_data_V_dout,
        status_in_data_V_empty_n,
        status_in_data_V_read,
        ovflo_din,
        ovflo_full_n,
        ovflo_write,
        coefs_address0,
        coefs_ce0,
        coefs_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        xk_arg_dout,
        xk_arg_empty_n,
        xk_arg_read
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 20'b1;
parameter    ap_ST_st2_fsm_1 = 20'b10;
parameter    ap_ST_st3_fsm_2 = 20'b100;
parameter    ap_ST_st4_fsm_3 = 20'b1000;
parameter    ap_ST_st5_fsm_4 = 20'b10000;
parameter    ap_ST_st6_fsm_5 = 20'b100000;
parameter    ap_ST_st7_fsm_6 = 20'b1000000;
parameter    ap_ST_st8_fsm_7 = 20'b10000000;
parameter    ap_ST_st9_fsm_8 = 20'b100000000;
parameter    ap_ST_st10_fsm_9 = 20'b1000000000;
parameter    ap_ST_st11_fsm_10 = 20'b10000000000;
parameter    ap_ST_st12_fsm_11 = 20'b100000000000;
parameter    ap_ST_st13_fsm_12 = 20'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 20'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 20'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 20'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 20'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 20'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 20'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 20'b10000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv14_2000 = 14'b10000000000000;
parameter    ap_const_lv14_1 = 14'b1;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] status_in_data_V_dout;
input   status_in_data_V_empty_n;
output   status_in_data_V_read;
output   ovflo_din;
input   ovflo_full_n;
output   ovflo_write;
output  [12:0] coefs_address0;
output   coefs_ce0;
input  [63:0] coefs_q0;
output  [12:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [63:0] out_r_d0;
input  [63:0] xk_arg_dout;
input   xk_arg_empty_n;
output   xk_arg_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg status_in_data_V_read;
reg ovflo_write;
reg coefs_ce0;
reg out_r_ce0;
reg out_r_we0;
reg xk_arg_read;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm = 20'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_39;
wire   [13:0] i_1_fu_141_p2;
reg   [13:0] i_1_reg_223;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_76;
wire   [0:0] exitcond_fu_135_p2;
reg    ap_sig_bdd_87;
wire   [63:0] tmp_s_fu_147_p1;
reg   [63:0] tmp_s_reg_228;
wire   [31:0] tmp_1_fu_157_p1;
reg   [31:0] tmp_1_reg_238;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_102;
reg   [31:0] in_M_imag_addr1018_new_reg_243;
wire   [31:0] tmp_2_fu_171_p1;
reg   [31:0] tmp_2_reg_248;
reg   [31:0] coefs_M_imag_addr420_new6_reg_253;
wire   [31:0] p_x_M_real_read_assign_fu_185_p1;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_120;
wire   [31:0] p_x_M_imag_read_assign_fu_190_p1;
wire   [31:0] p_t_real_fu_195_p1;
wire   [31:0] p_t_imag_fu_200_p1;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] tmp_i_reg_282;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_135;
wire   [31:0] grp_fu_123_p2;
reg   [31:0] tmp_i_23_reg_287;
wire   [31:0] grp_fu_127_p2;
reg   [31:0] tmp_2_i_reg_292;
wire   [31:0] grp_fu_131_p2;
reg   [31:0] tmp_3_i_reg_297;
wire   [31:0] grp_fu_111_p2;
reg   [31:0] p_r_M_real_reg_302;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_150;
wire   [31:0] grp_fu_115_p2;
reg   [31:0] p_r_M_imag_reg_307;
reg   [13:0] i_reg_99;
reg    ap_sig_bdd_160;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_bdd_168;
wire   [31:0] grp_fu_111_p0;
wire   [31:0] grp_fu_111_p1;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_188;
wire   [31:0] grp_fu_115_p0;
wire   [31:0] grp_fu_115_p1;
wire   [31:0] grp_fu_119_p0;
wire   [31:0] grp_fu_119_p1;
wire   [31:0] grp_fu_123_p0;
wire   [31:0] grp_fu_123_p1;
wire   [31:0] grp_fu_127_p0;
wire   [31:0] grp_fu_127_p1;
wire   [31:0] grp_fu_131_p0;
wire   [31:0] grp_fu_131_p1;
wire   [31:0] p_1_0_toint_fu_208_p1;
wire   [31:0] p_0_0_toint_fu_205_p1;
wire    grp_fu_111_ce;
wire    grp_fu_115_ce;
wire    grp_fu_119_ce;
wire    grp_fu_123_ce;
wire    grp_fu_127_ce;
wire    grp_fu_131_ce;
reg   [19:0] ap_NS_fsm;


sosf_detector_top_fsub_32ns_32ns_32_10_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sosf_detector_top_fsub_32ns_32ns_32_10_full_dsp_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_111_p0 ),
    .din1( grp_fu_111_p1 ),
    .ce( grp_fu_111_ce ),
    .dout( grp_fu_111_p2 )
);

sosf_detector_top_fadd_32ns_32ns_32_10_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sosf_detector_top_fadd_32ns_32ns_32_10_full_dsp_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_115_p0 ),
    .din1( grp_fu_115_p1 ),
    .ce( grp_fu_115_ce ),
    .dout( grp_fu_115_p2 )
);

sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U8(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_119_p0 ),
    .din1( grp_fu_119_p1 ),
    .ce( grp_fu_119_ce ),
    .dout( grp_fu_119_p2 )
);

sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_123_p0 ),
    .din1( grp_fu_123_p1 ),
    .ce( grp_fu_123_ce ),
    .dout( grp_fu_123_p2 )
);

sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U10(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_127_p0 ),
    .din1( grp_fu_127_p1 ),
    .ce( grp_fu_127_ce ),
    .dout( grp_fu_127_p2 )
);

sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sosf_detector_top_fmul_32ns_32ns_32_6_max_dsp_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_131_p0 ),
    .din1( grp_fu_131_p1 ),
    .ce( grp_fu_131_ce ),
    .dout( grp_fu_131_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        i_reg_99 <= i_1_reg_223;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_160)) begin
        i_reg_99 <= ap_const_lv14_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(xk_arg_empty_n == ap_const_logic_0))) begin
        coefs_M_imag_addr420_new6_reg_253 <= {{coefs_q0[ap_const_lv32_3F : ap_const_lv32_20]}};
        in_M_imag_addr1018_new_reg_243 <= {{xk_arg_dout[ap_const_lv32_3F : ap_const_lv32_20]}};
        tmp_1_reg_238 <= tmp_1_fu_157_p1;
        tmp_2_reg_248 <= tmp_2_fu_171_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_87)) begin
        i_1_reg_223 <= i_1_fu_141_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        p_r_M_imag_reg_307 <= grp_fu_115_p2;
        p_r_M_real_reg_302 <= grp_fu_111_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        tmp_2_i_reg_292 <= grp_fu_127_p2;
        tmp_3_i_reg_297 <= grp_fu_131_p2;
        tmp_i_23_reg_287 <= grp_fu_123_p2;
        tmp_i_reg_282 <= grp_fu_119_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87)) begin
        tmp_s_reg_228[0] <= tmp_s_fu_147_p1[0];
tmp_s_reg_228[1] <= tmp_s_fu_147_p1[1];
tmp_s_reg_228[2] <= tmp_s_fu_147_p1[2];
tmp_s_reg_228[3] <= tmp_s_fu_147_p1[3];
tmp_s_reg_228[4] <= tmp_s_fu_147_p1[4];
tmp_s_reg_228[5] <= tmp_s_fu_147_p1[5];
tmp_s_reg_228[6] <= tmp_s_fu_147_p1[6];
tmp_s_reg_228[7] <= tmp_s_fu_147_p1[7];
tmp_s_reg_228[8] <= tmp_s_fu_147_p1[8];
tmp_s_reg_228[9] <= tmp_s_fu_147_p1[9];
tmp_s_reg_228[10] <= tmp_s_fu_147_p1[10];
tmp_s_reg_228[11] <= tmp_s_fu_147_p1[11];
tmp_s_reg_228[12] <= tmp_s_fu_147_p1[12];
tmp_s_reg_228[13] <= tmp_s_fu_147_p1[13];
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_135_p2 or ap_sig_bdd_87)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_135_p2 or ap_sig_bdd_87)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_188)
begin
    if (ap_sig_bdd_188) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_150)
begin
    if (ap_sig_bdd_150) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_39)
begin
    if (ap_sig_bdd_39) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st20_fsm_19 assign process. ///
always @ (ap_sig_bdd_168)
begin
    if (ap_sig_bdd_168) begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_76)
begin
    if (ap_sig_bdd_76) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_120)
begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_135)
begin
    if (ap_sig_bdd_135) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// coefs_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_87)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_87)) begin
        coefs_ce0 = ap_const_logic_1;
    end else begin
        coefs_ce0 = ap_const_logic_0;
    end
end

/// out_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st20_fsm_19)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        out_r_ce0 = ap_const_logic_1;
    end else begin
        out_r_ce0 = ap_const_logic_0;
    end
end

/// out_r_we0 assign process. ///
always @ (ap_sig_cseq_ST_st20_fsm_19)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        out_r_we0 = ap_const_logic_1;
    end else begin
        out_r_we0 = ap_const_logic_0;
    end
end

/// ovflo_write assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_135_p2 or ap_sig_bdd_87)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87)) begin
        ovflo_write = ap_const_logic_1;
    end else begin
        ovflo_write = ap_const_logic_0;
    end
end

/// status_in_data_V_read assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_135_p2 or ap_sig_bdd_87)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87)) begin
        status_in_data_V_read = ap_const_logic_1;
    end else begin
        status_in_data_V_read = ap_const_logic_0;
    end
end

/// xk_arg_read assign process. ///
always @ (xk_arg_empty_n or ap_sig_cseq_ST_st3_fsm_2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(xk_arg_empty_n == ap_const_logic_0))) begin
        xk_arg_read = ap_const_logic_1;
    end else begin
        xk_arg_read = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or xk_arg_empty_n or exitcond_fu_135_p2 or ap_sig_bdd_87 or ap_sig_bdd_160)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_160) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~(exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_87)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(xk_arg_empty_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_120 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_135 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_135 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_150 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_150 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_160 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_160 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_168 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_168 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end

/// ap_sig_bdd_188 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_188 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_39 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_39 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_76 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_76 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_87 assign process. ///
always @ (status_in_data_V_empty_n or ovflo_full_n or exitcond_fu_135_p2)
begin
    ap_sig_bdd_87 = (((status_in_data_V_empty_n == ap_const_logic_0) & ~(exitcond_fu_135_p2 == ap_const_lv1_0)) | (~(exitcond_fu_135_p2 == ap_const_lv1_0) & (ovflo_full_n == ap_const_logic_0)));
end
assign coefs_address0 = tmp_s_fu_147_p1;
assign exitcond_fu_135_p2 = (i_reg_99 == ap_const_lv14_2000? 1'b1: 1'b0);
assign grp_fu_111_ce = ap_const_logic_1;
assign grp_fu_111_p0 = tmp_i_reg_282;
assign grp_fu_111_p1 = tmp_i_23_reg_287;
assign grp_fu_115_ce = ap_const_logic_1;
assign grp_fu_115_p0 = tmp_2_i_reg_292;
assign grp_fu_115_p1 = tmp_3_i_reg_297;
assign grp_fu_119_ce = ap_const_logic_1;
assign grp_fu_119_p0 = p_x_M_real_read_assign_fu_185_p1;
assign grp_fu_119_p1 = p_t_real_fu_195_p1;
assign grp_fu_123_ce = ap_const_logic_1;
assign grp_fu_123_p0 = p_x_M_imag_read_assign_fu_190_p1;
assign grp_fu_123_p1 = p_t_imag_fu_200_p1;
assign grp_fu_127_ce = ap_const_logic_1;
assign grp_fu_127_p0 = p_x_M_imag_read_assign_fu_190_p1;
assign grp_fu_127_p1 = p_t_real_fu_195_p1;
assign grp_fu_131_ce = ap_const_logic_1;
assign grp_fu_131_p0 = p_x_M_real_read_assign_fu_185_p1;
assign grp_fu_131_p1 = p_t_imag_fu_200_p1;
assign i_1_fu_141_p2 = (i_reg_99 + ap_const_lv14_1);
assign out_r_address0 = tmp_s_reg_228;
assign out_r_d0 = {{p_1_0_toint_fu_208_p1}, {p_0_0_toint_fu_205_p1}};
assign ovflo_din = status_in_data_V_dout[0:0];
assign p_0_0_toint_fu_205_p1 = p_r_M_real_reg_302;
assign p_1_0_toint_fu_208_p1 = p_r_M_imag_reg_307;
assign p_t_imag_fu_200_p1 = coefs_M_imag_addr420_new6_reg_253;
assign p_t_real_fu_195_p1 = tmp_2_reg_248;
assign p_x_M_imag_read_assign_fu_190_p1 = in_M_imag_addr1018_new_reg_243;
assign p_x_M_real_read_assign_fu_185_p1 = tmp_1_reg_238;
assign tmp_1_fu_157_p1 = xk_arg_dout[31:0];
assign tmp_2_fu_171_p1 = coefs_q0[31:0];
assign tmp_s_fu_147_p1 = i_reg_99;
always @ (posedge ap_clk)
begin
    tmp_s_reg_228[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end



endmodule //sosf_detector_top_dummy_proc_be

